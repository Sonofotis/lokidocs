{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Loki Network \u00b6 Information is Important \u00b6 Privacy is having the agency to decide when you reveal personal information. It is a particularly valuable quality today, when the collection and storage of personal data is taking place at unprecedented levels in history. Loki provides the means to transact and communicate privately and anonymously, using the decentralised nature of blockchain technology to create new methods of interacting with the internet. Loki is a private cryptocurrency based on Monero. Over the course of the coming months, the Loki project aims to offer an incenvised full node layer with a secondary p2p network that offers a private communications layer based on the Tor protocol. More information on the project can be found on the website and in the whitepaper . Loki is an open source project, and we encourage contributions from anyone with something to offer. For more information on contributing, please contact team@loki.network Copyright (c) 2018 The Loki Project. Portions Copyright (c) 2014-2018 The Monero Project. Portions Copyright (c) 2012-2013 The Cryptonote developers. Development resources \u00b6 Web: loki.network Telegram: t.me/LokiCommunity Mail: team@loki.network GitHub: https://github.com/loki-project/loki Discord: https://discord.gg/67GXfD6 Vulnerability disclosure \u00b6 Check out our Vulnerability Response Process , encourages prompt disclosure of any Vulnerabilities","title":"Home"},{"location":"#loki-network","text":"","title":"Loki Network"},{"location":"#information-is-important","text":"Privacy is having the agency to decide when you reveal personal information. It is a particularly valuable quality today, when the collection and storage of personal data is taking place at unprecedented levels in history. Loki provides the means to transact and communicate privately and anonymously, using the decentralised nature of blockchain technology to create new methods of interacting with the internet. Loki is a private cryptocurrency based on Monero. Over the course of the coming months, the Loki project aims to offer an incenvised full node layer with a secondary p2p network that offers a private communications layer based on the Tor protocol. More information on the project can be found on the website and in the whitepaper . Loki is an open source project, and we encourage contributions from anyone with something to offer. For more information on contributing, please contact team@loki.network Copyright (c) 2018 The Loki Project. Portions Copyright (c) 2014-2018 The Monero Project. Portions Copyright (c) 2012-2013 The Cryptonote developers.","title":"Information is Important"},{"location":"#development-resources","text":"Web: loki.network Telegram: t.me/LokiCommunity Mail: team@loki.network GitHub: https://github.com/loki-project/loki Discord: https://discord.gg/67GXfD6","title":"Development resources"},{"location":"#vulnerability-disclosure","text":"Check out our Vulnerability Response Process , encourages prompt disclosure of any Vulnerabilities","title":"Vulnerability disclosure"},{"location":"About/loki/","text":"","title":"To be added"},{"location":"Advanced/EmissionCurve/","text":"Emission Curve \u00b6 Loki is a Blockchain network oriented toward the provision of privacy-preserving services over a network of Service Nodes. The salient cryptoeconomic problem is how to incentivise actors in the Loki network to operate Service Nodes in a manner compatible with the objectives of the Loki network, in particular decentralisation and privacy. To solve this problem the Loki Project team commissioned two Economic papers: Cryptoeconomics of the Loki Network Loki Cryptoeconomics Block Reward \u00b6 As a result of this study, on the 30th of July, 2018, at block 64324, the Loki block reward went from being calculated in terms of the circulating supply with an emission speed factor of 20(link to Monero stuff), to be derived from the block height. The formula used to calculate the block reward BR where h is the block height is: Block Reward Split \u00b6 As Service Node's went live on 20th of September, 2018, at block 101250, the addition of a Block Reward split was required to financially incentive the Service Node Operators to maintain and run a Service Node. During the fork on the 30th of July, 2018, the Block Reward was hard coded to split the reward as follows: Party Percent of Reward Service Nodes 50% Miners 45% Governance 5%","title":"Emission Curve"},{"location":"Advanced/EmissionCurve/#emission-curve","text":"Loki is a Blockchain network oriented toward the provision of privacy-preserving services over a network of Service Nodes. The salient cryptoeconomic problem is how to incentivise actors in the Loki network to operate Service Nodes in a manner compatible with the objectives of the Loki network, in particular decentralisation and privacy. To solve this problem the Loki Project team commissioned two Economic papers: Cryptoeconomics of the Loki Network Loki Cryptoeconomics","title":"Emission Curve"},{"location":"Advanced/EmissionCurve/#block-reward","text":"As a result of this study, on the 30th of July, 2018, at block 64324, the Loki block reward went from being calculated in terms of the circulating supply with an emission speed factor of 20(link to Monero stuff), to be derived from the block height. The formula used to calculate the block reward BR where h is the block height is:","title":"Block Reward"},{"location":"Advanced/EmissionCurve/#block-reward-split","text":"As Service Node's went live on 20th of September, 2018, at block 101250, the addition of a Block Reward split was required to financially incentive the Service Node Operators to maintain and run a Service Node. During the fork on the 30th of July, 2018, the Block Reward was hard coded to split the reward as follows: Party Percent of Reward Service Nodes 50% Miners 45% Governance 5%","title":"Block Reward Split"},{"location":"Advanced/SybilResistance/","text":"Sybil Resistance \u00b6","title":"Sybil Resistance"},{"location":"Advanced/SybilResistance/#sybil-resistance","text":"","title":"Sybil Resistance"},{"location":"Advanced/TechnicalSpecs/","text":"","title":"Technical Specs"},{"location":"Contributing/Github/","text":"","title":"Using Github"},{"location":"Introduction/BeginnersGuide/","text":"Beginners Guide \u00b6","title":"Where to begin?"},{"location":"Introduction/BeginnersGuide/#beginners-guide","text":"","title":"Beginners Guide"},{"location":"Introduction/Overview/","text":"Overview \u00b6 Wallets \u00b6 The Loki wallets offer a gateway to private decentralised transactions and communications. It allows you to hold and secure Loki, mine and trade peer-to-peer. Download the official Loki wallet today and start taking back control of your online privacy. Web Wallet : The quickest way to access a Loki Wallet is through a web based wallet, Loki Locker . Graphical User Interface Wallet (GUI) : The Gui Wallet is just as easy to use however requires you to download the latest release from Loki Projects Github . Command Line Interface Wallet (CLI) : The Cli Wallet is for more advanced users and offers the most tools when interacting with the Loki Blockchain... and feels the most badass. Mining \u00b6 Service Nodes \u00b6 The Loki cryptocurrency creates a network of Service Nodes who are paid to propagate the blockchain, process transactions, and route traffic and messages on LokiNET . The following are useful guides or resources for Service Nodes : Service Node Portal : Loki's official Service Node Portal. Full Guide : How to setup a Service Node using the CLI Wallet. Setup Video Guide : Video Guide on how to setup a Service Node using the CLI Wallet. Reward Calculator OSX : Service Node reward calculator for OSX. Reward Calculator Windows : Service Node reward calculator for Windows. Staking Requirement Calculator WEB : Webpage showing Staking Requirement at current Block Height. LokiNET \u00b6 LokiNET is a new type of mixnet that uses market-based Sybil attack resistance and onion routing to create a new private tunnel to the internet. Users of Lokinet will be able to access normal websites and SNApps without revealing their IP address. SNApps are traditional web applications that sit inside LokiNET . As the host\u2019s IP is never revealed, this provides great protection for the development of censorship resistant social media, marketplaces, information sharing sites, and other apps that depend on user and server anonymity. The following are useful guides or resources for LokiNET : Setting Up A SNApp : How to host a hidden service the right way. Setting Up A TestNet Relay : How to host a relay on the test network. Developer Info : Protocol Specifications. Advanced \u00b6 FAQ \u00b6 Contributing \u00b6 About \u00b6","title":"Overview"},{"location":"Introduction/Overview/#overview","text":"","title":"Overview"},{"location":"Introduction/Overview/#wallets","text":"The Loki wallets offer a gateway to private decentralised transactions and communications. It allows you to hold and secure Loki, mine and trade peer-to-peer. Download the official Loki wallet today and start taking back control of your online privacy. Web Wallet : The quickest way to access a Loki Wallet is through a web based wallet, Loki Locker . Graphical User Interface Wallet (GUI) : The Gui Wallet is just as easy to use however requires you to download the latest release from Loki Projects Github . Command Line Interface Wallet (CLI) : The Cli Wallet is for more advanced users and offers the most tools when interacting with the Loki Blockchain... and feels the most badass.","title":"Wallets"},{"location":"Introduction/Overview/#mining","text":"","title":"Mining"},{"location":"Introduction/Overview/#service-nodes","text":"The Loki cryptocurrency creates a network of Service Nodes who are paid to propagate the blockchain, process transactions, and route traffic and messages on LokiNET . The following are useful guides or resources for Service Nodes : Service Node Portal : Loki's official Service Node Portal. Full Guide : How to setup a Service Node using the CLI Wallet. Setup Video Guide : Video Guide on how to setup a Service Node using the CLI Wallet. Reward Calculator OSX : Service Node reward calculator for OSX. Reward Calculator Windows : Service Node reward calculator for Windows. Staking Requirement Calculator WEB : Webpage showing Staking Requirement at current Block Height.","title":"Service Nodes"},{"location":"Introduction/Overview/#lokinet","text":"LokiNET is a new type of mixnet that uses market-based Sybil attack resistance and onion routing to create a new private tunnel to the internet. Users of Lokinet will be able to access normal websites and SNApps without revealing their IP address. SNApps are traditional web applications that sit inside LokiNET . As the host\u2019s IP is never revealed, this provides great protection for the development of censorship resistant social media, marketplaces, information sharing sites, and other apps that depend on user and server anonymity. The following are useful guides or resources for LokiNET : Setting Up A SNApp : How to host a hidden service the right way. Setting Up A TestNet Relay : How to host a relay on the test network. Developer Info : Protocol Specifications.","title":"LokiNET"},{"location":"Introduction/Overview/#advanced","text":"","title":"Advanced"},{"location":"Introduction/Overview/#faq","text":"","title":"FAQ"},{"location":"Introduction/Overview/#contributing","text":"","title":"Contributing"},{"location":"Introduction/Overview/#about","text":"","title":"About"},{"location":"LokiNET/DeveloperInfo/","text":"Developer Info \u00b6 DHT entities \u00b6 Intro : Router Identity Key + Path ID + expiration timestamp + extra metadata, advertised by a hidden service as a middle point for communication. Introset : A set of intros and related metadata signed by the hidden service's public signing key , used to advertise how to access a hidden service to the LokiNET DHT. Link Layer entities \u00b6 Router Contact : self signed metadata associated with a Service Node, includes public key address of a SN (Service Node), and AddressInfos Address Info : // TODO Exit Info : // TODO","title":"Developers"},{"location":"LokiNET/DeveloperInfo/#developer-info","text":"","title":"Developer Info"},{"location":"LokiNET/DeveloperInfo/#dht-entities","text":"Intro : Router Identity Key + Path ID + expiration timestamp + extra metadata, advertised by a hidden service as a middle point for communication. Introset : A set of intros and related metadata signed by the hidden service's public signing key , used to advertise how to access a hidden service to the LokiNET DHT.","title":"DHT entities"},{"location":"LokiNET/DeveloperInfo/#link-layer-entities","text":"Router Contact : self signed metadata associated with a Service Node, includes public key address of a SN (Service Node), and AddressInfos Address Info : // TODO Exit Info : // TODO","title":"Link Layer entities"},{"location":"LokiNET/LLARP/","text":"","title":"LLARP"},{"location":"LokiNET/LokiNetOverview/","text":"LokiNET Overview \u00b6 Terms \u00b6 Service Node : Full nodes on the Loki Network. SNApps/Hidden Services : An anonymized IP endpoint. Guides \u00b6 Setting Up A SNApp : How to host a hidden service the right way. Setting Up A TestNet Relay : How to host a relay on the test network. Developer Info : Protocol Specifications. Concepts \u00b6 Path : Bidirection Onion Routing Construct, (I2P tunnel / Tor circuit equiv.)","title":"Overview"},{"location":"LokiNET/LokiNetOverview/#lokinet-overview","text":"","title":"LokiNET Overview"},{"location":"LokiNET/LokiNetOverview/#terms","text":"Service Node : Full nodes on the Loki Network. SNApps/Hidden Services : An anonymized IP endpoint.","title":"Terms"},{"location":"LokiNET/LokiNetOverview/#guides","text":"Setting Up A SNApp : How to host a hidden service the right way. Setting Up A TestNet Relay : How to host a relay on the test network. Developer Info : Protocol Specifications.","title":"Guides"},{"location":"LokiNET/LokiNetOverview/#concepts","text":"Path : Bidirection Onion Routing Construct, (I2P tunnel / Tor circuit equiv.)","title":"Concepts"},{"location":"LokiNET/Messenger/","text":"","title":"Messenger"},{"location":"LokiNET/SNapps/","text":"","title":"SNapps"},{"location":"LokiNET/Guides/ExitNode/","text":"LokiNET Exit Node Guide \u00b6 // TODO: exit node overview goes here Prequesites \u00b6 // TODO: technical prequesites goes here Technical \u00b6 // TODO: technical overview about exit nodes Bandwidth \u00b6 // TODO: notes about bandwidth OS Limits (?) \u00b6 // TODO: talk about OS level limits for IPv4 exits // TODO: talk about ipv6 exit requirements, i.e. a /120 to /64 Legal \u00b6 // TODO: legal overivew Disclaimer \u00b6 // TODO: overview of exit traffic legality in various regions Email Templates \u00b6 // TODO: links to response templates go here Dear Sir/Madam, [Insert response template here] Best of luck, [Exit node oper name/organization here] Best Practices \u00b6 // TODO: insert best practices here // TODO: abuse complaints // TODO: Automated DMCA Spam Notices // TODO: traffic shaping (?) // TODO: ipv6 implications Worst Case Emergencies \u00b6 // TODO: link to EFF resources // TODO: insert info about handling police here // TODO: don't talk to the police video goes here","title":"Exit Nodes"},{"location":"LokiNET/Guides/ExitNode/#lokinet-exit-node-guide","text":"// TODO: exit node overview goes here","title":"LokiNET Exit Node Guide"},{"location":"LokiNET/Guides/ExitNode/#prequesites","text":"// TODO: technical prequesites goes here","title":"Prequesites"},{"location":"LokiNET/Guides/ExitNode/#technical","text":"// TODO: technical overview about exit nodes","title":"Technical"},{"location":"LokiNET/Guides/ExitNode/#bandwidth","text":"// TODO: notes about bandwidth","title":"Bandwidth"},{"location":"LokiNET/Guides/ExitNode/#os-limits","text":"// TODO: talk about OS level limits for IPv4 exits // TODO: talk about ipv6 exit requirements, i.e. a /120 to /64","title":"OS Limits (?)"},{"location":"LokiNET/Guides/ExitNode/#legal","text":"// TODO: legal overivew","title":"Legal"},{"location":"LokiNET/Guides/ExitNode/#disclaimer","text":"// TODO: overview of exit traffic legality in various regions","title":"Disclaimer"},{"location":"LokiNET/Guides/ExitNode/#email-templates","text":"// TODO: links to response templates go here Dear Sir/Madam, [Insert response template here] Best of luck, [Exit node oper name/organization here]","title":"Email Templates"},{"location":"LokiNET/Guides/ExitNode/#best-practices","text":"// TODO: insert best practices here // TODO: abuse complaints // TODO: Automated DMCA Spam Notices // TODO: traffic shaping (?) // TODO: ipv6 implications","title":"Best Practices"},{"location":"LokiNET/Guides/ExitNode/#worst-case-emergencies","text":"// TODO: link to EFF resources // TODO: insert info about handling police here // TODO: don't talk to the police video goes here","title":"Worst Case Emergencies"},{"location":"LokiNET/Guides/SNApps/","text":"LokiNET SNApps/Hidden Service Setup Guide \u00b6 // TODO: overview goes here Installing \u00b6 // TOOD: LokiNET install instructions go here Setup \u00b6 // TODO: hidden service config and setup goes here Best Practices \u00b6 // TODO: talk about binding to all interfaces being bad // TODO: talk about networking namespaces options for linux Examples \u00b6 // TODO: insert secure example here","title":"SNApps"},{"location":"LokiNET/Guides/SNApps/#lokinet-snappshidden-service-setup-guide","text":"// TODO: overview goes here","title":"LokiNET SNApps/Hidden Service Setup Guide"},{"location":"LokiNET/Guides/SNApps/#installing","text":"// TOOD: LokiNET install instructions go here","title":"Installing"},{"location":"LokiNET/Guides/SNApps/#setup","text":"// TODO: hidden service config and setup goes here","title":"Setup"},{"location":"LokiNET/Guides/SNApps/#best-practices","text":"// TODO: talk about binding to all interfaces being bad // TODO: talk about networking namespaces options for linux","title":"Best Practices"},{"location":"LokiNET/Guides/SNApps/#examples","text":"// TODO: insert secure example here","title":"Examples"},{"location":"LokiNET/Guides/TestNetRelay/","text":"LokiNET testnet relay guide \u00b6 // TODO: overview Prequisites \u00b6 // TODO: insert prequesites here Installing \u00b6 // TODO: insert install guide here Configuration \u00b6 // TODO: insert config guide here Exit Traffic \u00b6 // TODO: exit node oper overview goes here For More information see the Exit Node Guide .","title":"Test Network Relay"},{"location":"LokiNET/Guides/TestNetRelay/#lokinet-testnet-relay-guide","text":"// TODO: overview","title":"LokiNET testnet relay guide"},{"location":"LokiNET/Guides/TestNetRelay/#prequisites","text":"// TODO: insert prequesites here","title":"Prequisites"},{"location":"LokiNET/Guides/TestNetRelay/#installing","text":"// TODO: insert install guide here","title":"Installing"},{"location":"LokiNET/Guides/TestNetRelay/#configuration","text":"// TODO: insert config guide here","title":"Configuration"},{"location":"LokiNET/Guides/TestNetRelay/#exit-traffic","text":"// TODO: exit node oper overview goes here For More information see the Exit Node Guide .","title":"Exit Traffic"},{"location":"LokiNET/SNApps/SNAppsOverview/","text":"","title":"SNAppsOverview"},{"location":"Mining/ProofOfWork/","text":"","title":"Proof Of Work"},{"location":"ServiceNodes/SNOverview/","text":"Service Nodes Overview \u00b6 To understand what a Service Node is, you can refer to the whitepaper to get an in depth understanding. For now, all you need to know is that: Service Nodes are full nodes on the Loki network Full nodes become Service Nodes when the owner locks the required amount of Loki for 30 days (2 days on testnet) and submits a registration transaction Once accepted by the network, the Service Node is eligible to win block rewards Multiple participants can be involved in one Service Node and can have the reward automatically distributed It is also worth noting that Service Nodes are quite basic at the moment, and operators will need to stay up to date with new updates to keep in line with software and hardware requirements. Once all of the updates are out, Service Nodes will also: Route end user\u2019s internet traffic, either as an exit node or relay in a novel mixnet Receive, store and forward encrypted user messages Monitor other Service Nodes and vote on their performance Be called into quorums which give them authority over instant transactions (Blink) Act as remote nodes for users Once these features come out, Service Node operation will require better servers, particularly when it comes to bandwidth. Terms \u00b6 Service Node : Full nodes on the Loki Network. Staking Requirement : Collateral requirement to run a Service Node. Guides \u00b6 Setting up Service Node : How to host and maintain a Service Node using the CLI wallet . Service Node RPC : How to use JSON 2.0 RPC Calls with Service Nodes. Concepts \u00b6","title":"Overview"},{"location":"ServiceNodes/SNOverview/#service-nodes-overview","text":"To understand what a Service Node is, you can refer to the whitepaper to get an in depth understanding. For now, all you need to know is that: Service Nodes are full nodes on the Loki network Full nodes become Service Nodes when the owner locks the required amount of Loki for 30 days (2 days on testnet) and submits a registration transaction Once accepted by the network, the Service Node is eligible to win block rewards Multiple participants can be involved in one Service Node and can have the reward automatically distributed It is also worth noting that Service Nodes are quite basic at the moment, and operators will need to stay up to date with new updates to keep in line with software and hardware requirements. Once all of the updates are out, Service Nodes will also: Route end user\u2019s internet traffic, either as an exit node or relay in a novel mixnet Receive, store and forward encrypted user messages Monitor other Service Nodes and vote on their performance Be called into quorums which give them authority over instant transactions (Blink) Act as remote nodes for users Once these features come out, Service Node operation will require better servers, particularly when it comes to bandwidth.","title":"Service Nodes Overview"},{"location":"ServiceNodes/SNOverview/#terms","text":"Service Node : Full nodes on the Loki Network. Staking Requirement : Collateral requirement to run a Service Node.","title":"Terms"},{"location":"ServiceNodes/SNOverview/#guides","text":"Setting up Service Node : How to host and maintain a Service Node using the CLI wallet . Service Node RPC : How to use JSON 2.0 RPC Calls with Service Nodes.","title":"Guides"},{"location":"ServiceNodes/SNOverview/#concepts","text":"","title":"Concepts"},{"location":"ServiceNodes/StakingRequirement/","text":"","title":"Staking Requirement"},{"location":"Wallets/WalletsOverview/","text":"Wallets \u00b6 The Loki wallet is a gateway to private decentralised transactions and communications. It allows you to hold and secure Loki, mine and trade peer-to-peer. Download the official Loki wallet today and start taking back control of your online privacy. Web Wallet \u00b6 The quickest way to access a Loki Wallet is through a web based wallet, Loki Locker . Graphical User Interface Wallet (GUI) \u00b6 Graphical User Interface Wallet : The Gui Wallet is just as easy to use however requires you to download the latest release from Loki Projects Github . For installation help you can check out the following guide: Gui-Guide-Windows Command Line Interface Wallet (CLI) \u00b6 The Cli Wallet is for more advanced users and offers the most tools when interacting with the Loki Blockchain... and feels the most badass.","title":"Overview"},{"location":"Wallets/WalletsOverview/#wallets","text":"The Loki wallet is a gateway to private decentralised transactions and communications. It allows you to hold and secure Loki, mine and trade peer-to-peer. Download the official Loki wallet today and start taking back control of your online privacy.","title":"Wallets"},{"location":"Wallets/WalletsOverview/#web-wallet","text":"The quickest way to access a Loki Wallet is through a web based wallet, Loki Locker .","title":"Web Wallet"},{"location":"Wallets/WalletsOverview/#graphical-user-interface-wallet-gui","text":"Graphical User Interface Wallet : The Gui Wallet is just as easy to use however requires you to download the latest release from Loki Projects Github . For installation help you can check out the following guide: Gui-Guide-Windows","title":"Graphical User Interface Wallet (GUI)"},{"location":"Wallets/WalletsOverview/#command-line-interface-wallet-cli","text":"The Cli Wallet is for more advanced users and offers the most tools when interacting with the Loki Blockchain... and feels the most badass.","title":"Command Line Interface Wallet (CLI)"},{"location":"Wallets/WhatWalletToUse/","text":"","title":"What wallet to use?"},{"location":"Wallets/CliWallet/2of2Multisig/","text":"Loki 2/2 Multisig \u00b6 First, the wallet to be converted to multisig must be empty. It is best to use a brand-new wallet for the purpose, although not required. It is strongly advised to make a copy of the wallet files first, just in case something goes wrong. Overview \u00b6 In short, the process is: Set-up Both parties prepare loki-wallet-cli files Both parties command prepare_multisig and send data to each other Both parties command make_multisig Receiving All parties can type address to see the created multisig wallet address. The address will, of course, be the same for all parties since they're all watching the same wallet. Preparation for Sending To prepare for sending both parties command export_multisig_info <filename> and send the file to the other party To complete preparation, all parties command import_multisig_info <filename1> <filename2> and import files from other parties Sending To send, any party can use the usual transfer command, but the result will be a file named multisig_loki_tx which must be sent to any 1 other signer The other party commands sign_multisig multisig_loki_tx and the file is updated with the signature. The completely signed file is pushed to the network with use of submit_multisig multisig_loki_tx Below is a step-by-step walkthrough. Set-up \u00b6 Step 1 Initiate Creation of Multisig Wallet and Exchange Data \u00b6 Requirements: 2 empty loki-wallet-cli wallets Both wallets connected to lokid Private communication channel Person A must run the command in their loki-wallet-cli : prepare_multisig Person A will receive the output: MultisigV1cYuTGuf8FSiCYnMtLU4sZzeKZgeMy51qf4CcG2EQ2BPqKTii6YanpNLJDTM9rVRNfBPNFnJHoCWwGT9d8kB2UEDNHDxjgaAZX6DAWtj9VBFq9Q5qHjduozaYzgYpbVfHKHUQR2UrJjyX7tCSyd8gFEHUSocDRejRZBrFrKNifri5ozpN Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Copy the entire line Multisig...5ozpN and be sure to capture the whole thing when copying. Send this line to person B through a private communication channel. Person B does the same and sends his output to person A. Person B must run the command in their loki-wallet-cli : prepare_multisig Person B will receive the output: MultisigV1BU9w9mysQMhNTYcNFQgD82VQiKFGpkwy8Jmu13iWWBmoeRbqyuYmEh22bJRk945ntuDeazTsYwUCYZcCL1cxuf4xDzwUJCLkiYhPCvF7gv3xrCGkAiozirNUG6CxRa53mHqp4Cvdj3yxcQcYbXNYC1ecybbQMW1gs5BBQiruVGeJi4FS Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Person B will copy the Multisig\u2026...eJi4FS and send it to person A through a private communication channel. Step 2 Create Multisig Wallets \u00b6 Both person A and person B now have the Multisig...arg text from the other one. With that, each of them can create their part of the multisig wallet. Before you proceed, note that the wallet will lose access to the underlying account when converted to multisig. This is not really a problem, since we started with an empty one, and if all goes ok with this step, you won't ever need it unless you want to go through the process again for whatever reason (like HDD died, but you have the seed mnemonic of the underlying account and want to reconstruct the multisig wallet). Person A will use the output Person B sent and will run the command: make_multisig 2 MultisigV1BU9w9mysQMhNTYcNFQgD82VQiKFGpkwy8Jmu13iWWBmoeRbqyuYmEh22bJRk945ntuDeazTsYwUCYZcCL1cxuf4xDzwUJCLkiYhPCvF7gv3xrCGkAiozirNUG6CxRa53mHqp4Cvdj3yxcQcYbXNYC1ecybbQMW1gs5BBQiruVGeJi4FS The wallet will output something similar to: 2/2 multisig address: T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8 Person B will use the output Person A sent and run the command: make_multisig 2 MultisigV1cYuTGuf8FSiCYnMtLU4sZzeKZgeMy51qf4CcG2EQ2BPqKTii6YanpNLJDTM9rVRNfBPNFnJHoCWwGT9d8kB2UEDNHDxjgaAZX6DAWtj9VBFq9Q5qHjduozaYzgYpbVfHKHUQR2UrJjyX7tCSyd8gFEHUSocDRejRZBrFrKNifri5ozpN The wallet will output something similar to: 2/2 multisig address: T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8 Now each person involved should exchange addresses and compare, they must be the same. Receiving \u00b6 Step 1 Fund The Multisig Account \u00b6 This is simple. Just send to the shared address. You can send multiple times, this is the same as a normal wallet. You can use payment ID\u2019s as well, or generate an integrated address to receive funds. Best part, whomever is sending the funds won't be able to tell that the address belongs to a multisig wallet since it looks like any other. Step 2 Check Multisig Account Balance \u00b6 Just open the wallet and command refresh. Once completed, both persons can verify that the funds arrived. Person A commands: show_transfers Person A outputs: 1357156 in 07:50:35 PM 0.100000000000 88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873 0000000000000000 - 1357161 in 08:00:18 PM 0.100000000000 d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da 0000000000000000 - Person B can do the same: show_tranfers Person B has the same outputs: 1357156 in 07:50:35 PM 0.100000000000 88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873 0000000000000000 - 1357161 in 08:00:18 PM 0.100000000000 d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da 0000000000000000 - Spending \u00b6 Step 1 Synchronizing Key Images \u00b6 1.1 Exporting Multisig Info \u00b6 Without this step, it will not be possible to create a spending transaction. Both persons need to run the following command to sync their key images: export_multisig_info <filename> Where <filename> can be any filename. Person A will run the command: export_multisig_info mi1 Person A will receive the output: Multisig info exported to mi1 The file mi1 will be located in the shell working folder* Person A sends that file to Person B. They can send the file in many ways, preferably through by handing a usb drive with the file on it, however If you would like to send the file through terminal use https://transfer.sh/ , an optional step has been added if you choose to use this method. Person B does the same, but changing the filename and runs the command: export_multisig_info mi2 Person B will receive the output: Multisig info exported to mi2 The file mi2 will be located in the shell working folder* Person B sends that file to person A. Now, they must both import each other's file. Optional: Step 1.2 Sending Multisig Info File with terminal - transfer.sh \u00b6 It is optional to use the terminal to send each person the multisig info files. Uploading Multisig Info file \u00b6 Person A will open up a new terminal and change to the directory \u201cmi1\u201d has been saved.* Person A will run the following command: curl --upload-file ./mi1 https://transfer.sh/mi1 Person A will receive the link to the file as an output, looking similar to: https://transfer.sh/Ehl5q/mi1 Person A will need to send this link to Person B. Person B will run a similar command: curl --upload-file ./mi1 https://transfer.sh/mi2 Person B will receive the link to the file as an output, looking similar to: https://transfer.sh/Iedv9/mi2 Person B will need to send this link to Person A. Downloading Multisig Info file \u00b6 Person A should change to the directory of their loki-wallet-cli and use Person B\u2019s download link to run the command: curl <Person B link> -o <filename> Replacing <Person B link> with the link Person B shared with Person A and <filename> with the filename of the Multisig info file that Person A generated, for example Person A will run the command: curl https://transfer.sh/Iedv9/mi2 -o mi2 Likewise, Person B should do the same, changing directories to their loki-wallet-cli and downloading with Person A\u2019s download link, and filename. curl https://transfer.sh/Ehl5q/mi1 -o mi1 Step 1.3 Importing Multisig Info \u00b6 Person A will run the command: import_multisig_info mi2 Depending on the transactions made in to the multsig wallet the output will look similar to: 2 outputs found in mi2 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000 Person B will run a similar command: import_multisig_info mi1 and the output will look like: 2 outputs found in mi1 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000 Step 2 Preparing Spending Transaction \u00b6 Either person A or person B can do this, it doesn't matter. To avoid weird things from happening only do it for 1 transaction at a time. Person A performs the usual transfer command: transfer T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7 50 The output will look like*: Unsigned transaction(s) successfully written to file: multisig_loki_tx Check in the folder where you started loki-wallet-cli from*. There should be a file named multisig_loki_tx . Person A will send the file multisig_loki_tx to the Person B. Person A can send this file through email or alternatively use the transfer.sh commands outside of the wallet: curl --upload-file ./multisig_loki_tx https://transfer.sh/multisig_loki_tx If Person A chooses to use transfer.sh command to send the file to Person B they will receive a <link> to pass to Person B. Person B must finish the signature. Person B copies/downloads the file to the same folder from where he started (or will start) loki-wallet-cli *. Person B can run the command to download the file to the loki-wallet-cli directory. curl https://transfer.sh/CJqnM/multisig_loki_tx -o multisig_loki_tx Replacing https://transfer.sh/CJqnM/multisig_loki_tx with the link provided by Person A. Then, Person B runs the command: sign_multisig multisig_loki_tx A prompt will be displayed to allow person B to check the transaction before signing: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the output will look like: Transaction successfully signed to file multisig_loki_tx, txid 3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb It may be relayed to the network with submit_multisig Finally, person B submits the transaction to the network by commanding: submit_multisig multisig_loki_tx There will be a confirmation prompt: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the transaction will be sent. The output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb> The person B could also send the signed TX to person A, who could then submit it to the network himself. If you want to make another one, you have to go back to step 1 of spending (sync the key images again). *Note on folders and file locations, as it could create some confusions. The wallet will look for the files and export them to the folder from where it was started, ie where your command prompt / shell was when you called loki-wallet-cli . It may or may not be the same folder as your actual wallet files or loki-wallet-cli , depending on how you go about it. For example, your wallet could be on some USB drive like f:\\temp\\ , and your wallet software on c:\\loki-windows-x64\\ and your shell working folder could be c:\\ . If you remain in c:\\ with the shell, you could start the wallet by its full path and specify the wallet file location: c:\\loki-windows-x64\\loki-wallet-cli.exe --wallet-file f:\\temp\\mywallet . In this case, all the import/export stuff would be read/written to c:\\ because that's still your shell's working folder. It would be probably feel more natural to cd into the wallet folder. Do f: to change drive and then cd f:\\temp\\ . Then, simply start the wallet from that location by its full path again: c:\\loki-windows-x64\\loki-wallet-cli.exe --wallet-file mywallet . Notice how you don't have to write the full wallet path now as you're already there with your shell. In this case, all the files mentioned above would be written or read from the same folder as the wallet files. Source: Monero Stackexchange: How to use Monero Multisigniture Wallets","title":"2/2 Multisig"},{"location":"Wallets/CliWallet/2of2Multisig/#loki-22-multisig","text":"First, the wallet to be converted to multisig must be empty. It is best to use a brand-new wallet for the purpose, although not required. It is strongly advised to make a copy of the wallet files first, just in case something goes wrong.","title":"Loki 2/2 Multisig"},{"location":"Wallets/CliWallet/2of2Multisig/#overview","text":"In short, the process is: Set-up Both parties prepare loki-wallet-cli files Both parties command prepare_multisig and send data to each other Both parties command make_multisig Receiving All parties can type address to see the created multisig wallet address. The address will, of course, be the same for all parties since they're all watching the same wallet. Preparation for Sending To prepare for sending both parties command export_multisig_info <filename> and send the file to the other party To complete preparation, all parties command import_multisig_info <filename1> <filename2> and import files from other parties Sending To send, any party can use the usual transfer command, but the result will be a file named multisig_loki_tx which must be sent to any 1 other signer The other party commands sign_multisig multisig_loki_tx and the file is updated with the signature. The completely signed file is pushed to the network with use of submit_multisig multisig_loki_tx Below is a step-by-step walkthrough.","title":"Overview"},{"location":"Wallets/CliWallet/2of2Multisig/#set-up","text":"","title":"Set-up"},{"location":"Wallets/CliWallet/2of2Multisig/#step-1-initiate-creation-of-multisig-wallet-and-exchange-data","text":"Requirements: 2 empty loki-wallet-cli wallets Both wallets connected to lokid Private communication channel Person A must run the command in their loki-wallet-cli : prepare_multisig Person A will receive the output: MultisigV1cYuTGuf8FSiCYnMtLU4sZzeKZgeMy51qf4CcG2EQ2BPqKTii6YanpNLJDTM9rVRNfBPNFnJHoCWwGT9d8kB2UEDNHDxjgaAZX6DAWtj9VBFq9Q5qHjduozaYzgYpbVfHKHUQR2UrJjyX7tCSyd8gFEHUSocDRejRZBrFrKNifri5ozpN Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Copy the entire line Multisig...5ozpN and be sure to capture the whole thing when copying. Send this line to person B through a private communication channel. Person B does the same and sends his output to person A. Person B must run the command in their loki-wallet-cli : prepare_multisig Person B will receive the output: MultisigV1BU9w9mysQMhNTYcNFQgD82VQiKFGpkwy8Jmu13iWWBmoeRbqyuYmEh22bJRk945ntuDeazTsYwUCYZcCL1cxuf4xDzwUJCLkiYhPCvF7gv3xrCGkAiozirNUG6CxRa53mHqp4Cvdj3yxcQcYbXNYC1ecybbQMW1gs5BBQiruVGeJi4FS Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Person B will copy the Multisig\u2026...eJi4FS and send it to person A through a private communication channel.","title":"Step 1 Initiate Creation of Multisig Wallet and Exchange Data"},{"location":"Wallets/CliWallet/2of2Multisig/#step-2-create-multisig-wallets","text":"Both person A and person B now have the Multisig...arg text from the other one. With that, each of them can create their part of the multisig wallet. Before you proceed, note that the wallet will lose access to the underlying account when converted to multisig. This is not really a problem, since we started with an empty one, and if all goes ok with this step, you won't ever need it unless you want to go through the process again for whatever reason (like HDD died, but you have the seed mnemonic of the underlying account and want to reconstruct the multisig wallet). Person A will use the output Person B sent and will run the command: make_multisig 2 MultisigV1BU9w9mysQMhNTYcNFQgD82VQiKFGpkwy8Jmu13iWWBmoeRbqyuYmEh22bJRk945ntuDeazTsYwUCYZcCL1cxuf4xDzwUJCLkiYhPCvF7gv3xrCGkAiozirNUG6CxRa53mHqp4Cvdj3yxcQcYbXNYC1ecybbQMW1gs5BBQiruVGeJi4FS The wallet will output something similar to: 2/2 multisig address: T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8 Person B will use the output Person A sent and run the command: make_multisig 2 MultisigV1cYuTGuf8FSiCYnMtLU4sZzeKZgeMy51qf4CcG2EQ2BPqKTii6YanpNLJDTM9rVRNfBPNFnJHoCWwGT9d8kB2UEDNHDxjgaAZX6DAWtj9VBFq9Q5qHjduozaYzgYpbVfHKHUQR2UrJjyX7tCSyd8gFEHUSocDRejRZBrFrKNifri5ozpN The wallet will output something similar to: 2/2 multisig address: T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8 Now each person involved should exchange addresses and compare, they must be the same.","title":"Step 2 Create Multisig Wallets"},{"location":"Wallets/CliWallet/2of2Multisig/#receiving","text":"","title":"Receiving"},{"location":"Wallets/CliWallet/2of2Multisig/#step-1-fund-the-multisig-account","text":"This is simple. Just send to the shared address. You can send multiple times, this is the same as a normal wallet. You can use payment ID\u2019s as well, or generate an integrated address to receive funds. Best part, whomever is sending the funds won't be able to tell that the address belongs to a multisig wallet since it looks like any other.","title":"Step 1 Fund The Multisig Account"},{"location":"Wallets/CliWallet/2of2Multisig/#step-2-check-multisig-account-balance","text":"Just open the wallet and command refresh. Once completed, both persons can verify that the funds arrived. Person A commands: show_transfers Person A outputs: 1357156 in 07:50:35 PM 0.100000000000 88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873 0000000000000000 - 1357161 in 08:00:18 PM 0.100000000000 d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da 0000000000000000 - Person B can do the same: show_tranfers Person B has the same outputs: 1357156 in 07:50:35 PM 0.100000000000 88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873 0000000000000000 - 1357161 in 08:00:18 PM 0.100000000000 d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da 0000000000000000 -","title":"Step 2 Check Multisig Account Balance"},{"location":"Wallets/CliWallet/2of2Multisig/#spending","text":"","title":"Spending"},{"location":"Wallets/CliWallet/2of2Multisig/#step-1-synchronizing-key-images","text":"","title":"Step 1 Synchronizing Key Images"},{"location":"Wallets/CliWallet/2of2Multisig/#11-exporting-multisig-info","text":"Without this step, it will not be possible to create a spending transaction. Both persons need to run the following command to sync their key images: export_multisig_info <filename> Where <filename> can be any filename. Person A will run the command: export_multisig_info mi1 Person A will receive the output: Multisig info exported to mi1 The file mi1 will be located in the shell working folder* Person A sends that file to Person B. They can send the file in many ways, preferably through by handing a usb drive with the file on it, however If you would like to send the file through terminal use https://transfer.sh/ , an optional step has been added if you choose to use this method. Person B does the same, but changing the filename and runs the command: export_multisig_info mi2 Person B will receive the output: Multisig info exported to mi2 The file mi2 will be located in the shell working folder* Person B sends that file to person A. Now, they must both import each other's file.","title":"1.1 Exporting Multisig Info"},{"location":"Wallets/CliWallet/2of2Multisig/#optional-step-12-sending-multisig-info-file-with-terminal-transfersh","text":"It is optional to use the terminal to send each person the multisig info files.","title":"Optional: Step 1.2 Sending Multisig Info File with terminal - transfer.sh"},{"location":"Wallets/CliWallet/2of2Multisig/#uploading-multisig-info-file","text":"Person A will open up a new terminal and change to the directory \u201cmi1\u201d has been saved.* Person A will run the following command: curl --upload-file ./mi1 https://transfer.sh/mi1 Person A will receive the link to the file as an output, looking similar to: https://transfer.sh/Ehl5q/mi1 Person A will need to send this link to Person B. Person B will run a similar command: curl --upload-file ./mi1 https://transfer.sh/mi2 Person B will receive the link to the file as an output, looking similar to: https://transfer.sh/Iedv9/mi2 Person B will need to send this link to Person A.","title":"Uploading Multisig Info file"},{"location":"Wallets/CliWallet/2of2Multisig/#downloading-multisig-info-file","text":"Person A should change to the directory of their loki-wallet-cli and use Person B\u2019s download link to run the command: curl <Person B link> -o <filename> Replacing <Person B link> with the link Person B shared with Person A and <filename> with the filename of the Multisig info file that Person A generated, for example Person A will run the command: curl https://transfer.sh/Iedv9/mi2 -o mi2 Likewise, Person B should do the same, changing directories to their loki-wallet-cli and downloading with Person A\u2019s download link, and filename. curl https://transfer.sh/Ehl5q/mi1 -o mi1","title":"Downloading Multisig Info file"},{"location":"Wallets/CliWallet/2of2Multisig/#step-13-importing-multisig-info","text":"Person A will run the command: import_multisig_info mi2 Depending on the transactions made in to the multsig wallet the output will look similar to: 2 outputs found in mi2 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000 Person B will run a similar command: import_multisig_info mi1 and the output will look like: 2 outputs found in mi1 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000","title":"Step 1.3 Importing Multisig Info"},{"location":"Wallets/CliWallet/2of2Multisig/#step-2-preparing-spending-transaction","text":"Either person A or person B can do this, it doesn't matter. To avoid weird things from happening only do it for 1 transaction at a time. Person A performs the usual transfer command: transfer T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7 50 The output will look like*: Unsigned transaction(s) successfully written to file: multisig_loki_tx Check in the folder where you started loki-wallet-cli from*. There should be a file named multisig_loki_tx . Person A will send the file multisig_loki_tx to the Person B. Person A can send this file through email or alternatively use the transfer.sh commands outside of the wallet: curl --upload-file ./multisig_loki_tx https://transfer.sh/multisig_loki_tx If Person A chooses to use transfer.sh command to send the file to Person B they will receive a <link> to pass to Person B. Person B must finish the signature. Person B copies/downloads the file to the same folder from where he started (or will start) loki-wallet-cli *. Person B can run the command to download the file to the loki-wallet-cli directory. curl https://transfer.sh/CJqnM/multisig_loki_tx -o multisig_loki_tx Replacing https://transfer.sh/CJqnM/multisig_loki_tx with the link provided by Person A. Then, Person B runs the command: sign_multisig multisig_loki_tx A prompt will be displayed to allow person B to check the transaction before signing: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the output will look like: Transaction successfully signed to file multisig_loki_tx, txid 3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb It may be relayed to the network with submit_multisig Finally, person B submits the transaction to the network by commanding: submit_multisig multisig_loki_tx There will be a confirmation prompt: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the transaction will be sent. The output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb> The person B could also send the signed TX to person A, who could then submit it to the network himself. If you want to make another one, you have to go back to step 1 of spending (sync the key images again). *Note on folders and file locations, as it could create some confusions. The wallet will look for the files and export them to the folder from where it was started, ie where your command prompt / shell was when you called loki-wallet-cli . It may or may not be the same folder as your actual wallet files or loki-wallet-cli , depending on how you go about it. For example, your wallet could be on some USB drive like f:\\temp\\ , and your wallet software on c:\\loki-windows-x64\\ and your shell working folder could be c:\\ . If you remain in c:\\ with the shell, you could start the wallet by its full path and specify the wallet file location: c:\\loki-windows-x64\\loki-wallet-cli.exe --wallet-file f:\\temp\\mywallet . In this case, all the import/export stuff would be read/written to c:\\ because that's still your shell's working folder. It would be probably feel more natural to cd into the wallet folder. Do f: to change drive and then cd f:\\temp\\ . Then, simply start the wallet from that location by its full path again: c:\\loki-windows-x64\\loki-wallet-cli.exe --wallet-file mywallet . Notice how you don't have to write the full wallet path now as you're already there with your shell. In this case, all the files mentioned above would be written or read from the same folder as the wallet files. Source: Monero Stackexchange: How to use Monero Multisigniture Wallets","title":"Step 2 Preparing Spending Transaction"},{"location":"Wallets/CliWallet/2of3Multisig/","text":"Loki 2/3 Multisig \u00b6 First, the wallet to be converted to multisig must be empty. It is best to use a brand-new wallet for the purpose, although not required. It is strongly advised to make a copy of the wallet files first, just in case something goes wrong. Overview \u00b6 In short, the process is: Wallet Creation All parties command prepare_multisig and send data to ALL other parties All parties command make_multisig <threshold> <data1> <data2> and send 2nd batch of data to ALL other parties All parties command finalize_multisig <data1> <data2> with the data from ALL other parties. Receiving All parties can type address to see the created multisig wallet address. The address will, of course, be the same for all parties since they're all watching the same wallet. Preparation for Sending To prepare for sending all parties command export_multisig_info <filename> and send the file to all other parties To complete preparation, all parties command import_multisig_info <filename1> <filename2> and import files from other parties Sending To send, any party can use the usual transfer command, but the result will be a file named multisig_loki_tx which must be sent to any 1 other signer The other party commands sign_multisig multisig_loki_tx and the file is updated with the signature. The completely signed file is pushed to the network with use of submit_multisig multisig_loki_tx . Below is a step-by-step walkthrough. Wallet Creation \u00b6 Requirements: 3 empty loki-wallet-cli wallets All parties wallets connected to a lokid Private communication channel Step 1 - Prepare Multisig \u00b6 Here some data will be shown to the user, which has to be exchanged with ALL other parties. Person 1, 2 and 3 commands: prepare_multisig The output will be something like: MultisigV1cR7X7ZAfa5ncRmQv1hpt4P1DmmnhinhokhDMqsmuWXmHFrb6xUr3FtBGygCfMScxnKJvXK1vvPNahXNWfYWVquieBErr98sFtgs24c2YuYrQT78uxV8oYx1A9bKeHSUfYzCniN5kMznEfvKCw3FiomjLvw364gg98ZWp16zA7pUVozid Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Copy the entire line Multisig\u2026...Vozid and be sure to capture the whole thing when copying. Person 1 to send the Multsig...arg to Person 2 and 3, Person 2 to send their output to Person 1 and 3 and Person 3 to send their output to Person 1 and 2. Step 2 - Make Multisig \u00b6 All 3 persons now have the Multisig...arg text from the other 2. With that, each of them can create their part of the multisig wallet. Before you proceed, note that the wallet will lose access to the underlying wallet when converted to multisig. This is not really a problem, since we started with an empty wallet, and if all goes OK with this step, you won't ever need it unless you want to go through the process again for whatever reason (like HDD died, but you have the seed mnemonic of the underlying wallet and want to reconstruct the multisig wallet). Person 1 commands: make_multisig <threshold> <data person 2> <data person 3> Where <threshold> is the number of signers required out of the 3 people, <data person 2> is the output provided by Person 2, and <data person 3> is the output provided by Person 3. This should look similar to: make_multisig 2 MultisigV12EHtuvxFyAYDNcDsbDqWHDfkRr4JZchSdf8eZQSFwiMKDk15CYEJeQyEwtSnqUZdRr2BsEaT9z2biUdDTEQM4T3N625owvKMDoyhbRj3bwkBtceLKimap8DBAiUmSABpdf62HnPYiRtLW4JdVFmfqjndhWjYBypx1duvpi3qwfSrBY9a MultisigV1TqQ8Gt5Sb3GYtVJa1fQrK7e7hPm59XbooNvLxPSBR4856bW9jtD1hEyWy4yULKrX7reZZ6vrKdBCdSdk4nfApCGYJAA2WP4pKNwHDyKTuLEeuoDhqno8keEVeEF9AZsWXvng1avUTRREmy11h8wu8pdjopC4AguQKiHCJCN7aT9W6b8C Notice how there are 2 strings starting with Multisig....arg . One is from person 2 and other from person 3. The number at the beginning is the minimum required number of signatures. Since it's a 2/3 scheme - it's 2. The output from the make_multisig command will be similar to: Another step is needed MultisigxV1PKCwmVrucV8bXi18VnHFqRXcnAq4osFL3ahzPHCiN48zhs28u6jmEhy7ktZbUEGfRtTuFjjKzJYb61fnFwnysBBnNXsUtCgFMXPa7FyNKVy2AnUg3ePEnKqWkgKVvA81axTS8r9EX1DmVPXgFKkFzw4Yj4ZtMcJVo77b5ayuMzjFtsaijko9X2bjd9AVfFVGBFMCSLa4xXhNVNz19CTUJx5gpoPG Send this multisig info to all other participants, then use finalize_multisig <info1> [<info2>...] with others' multisig info With 2/3 there's an additional step to be done here. The new Multisig...arg info must be passed to ALL other participants (persons 2 & 3). Persons 2 & 3 do the same as above and send the info to other 2 parties. Step 3 - Finalize Multisig \u00b6 Here we do one last command to make the wallet ready for receiving. It requires the 2nd batch of Multisig\u2026....arg strings received from other parties. Person 1 will run the command: finalize_multisig MultisigxV1Vg1tsRLurvAc5aSA9Hd9God3MQhijCFoE1rPDFzx7ufwhs28u6jmEhy7ktZbUEGfRtTuFjjKzJYb61fnFwnysBBnfYm4xJWcJ4qM4khSb2KkyAKDuT39pTvdmemhojNjeYCmgSQ1NZLyBj48R1tVpiGNxa7TDnGbSgLuKBq35AX6jfu5PECAcDDn22CFQbJZip7xnBbn89Szzh27xeozfxcLiqqm MultisigxV14xDZBGACz3iUh2aVKGE5q5VzcvJdg2qCvZECgUWCdy5QNXsUtCgFMXPa7FyNKVy2AnUg3ePEnKqWkgKVvA81axTSfYm4xJWcJ4qM4khSb2KkyAKDuT39pTvdmemhojNjeYCmCNaRSsDEcemLLL8wCvzsy5R6hhkhWLYkD9vhZwprSFFKMZ7tfRko2VfMBoKQhB7PKXbf1npk2xceVKu2y7kExywb Unfortunately the wallet will not display an output at this point. There's no indication that the process was successfully completed (for now). All 3 persons do the same, and all 3 wallets will show the same address after this step. Now each person run the command: address And each 3 parties of the multisig wallet should be shown the same address in their wallet. Receiving \u00b6 Step 1 Fund The Multisig Account \u00b6 This is simple. Just send to the shared address. You can send multiple times, just like a normal wallet. You can use payment ID\u2019s as well, or generate an integrated address to receive funds. Best part, whomever is sending the funds won't be able to tell that the address belongs to a multisig wallet since it looks like any other Loki address. Step 2 Check Multisig Account Balance \u00b6 Just open the wallet and run the refresh command . Once completed, all persons can verify that the funds arrived. Person 1, 2 & 3 can run the command: show_transfers To see incoming transfers or the following command to see the balance of the wallet: balance Preparation for Spending \u00b6 Step 1 - Export Multisig \u00b6 Without this step, it will not be possible to create a transaction that spends Loki. As a minimum, the sender needs to get a partial key image from the same person who will sign the transaction with him later. He could get from both parties immediately and then later decide with whom to sign. Person 1 commands: export_multisig_info mi1 Where mi1 can be any filename. The output will be: Multisig info exported to mi1 The file mi1 will be located in the shell working folder* Person 1 sends that file to other persons. Persons 2 & 3 do the same. Optional: Step 1.2 Sending Multisig Info File with terminal - transfer.sh \u00b6 It is optional to use the terminal to send each person the multisig info files. Uploading Multisig Info file \u00b6 Person 1 will open up a new terminal and change to the directory mi1 has been saved.* Person 1 will run the following command: curl --upload-file ./mi1 https://transfer.sh/mi1 Person 1 will receive the link to the file as an output, looking similar to: https://transfer.sh/Ehl5q/mi1 Person 1 will need to send this link to Person 2 and Person 3. Person 2 will need to do the same and send the link to Person 1 and 3. Person 3 will need to do the same and send the link to Person 1 and 2. Downloading Multisig Info file \u00b6 Person 1 should change to the directory of their loki-wallet-cli and use Person 2 and 3\u2019s download link to run the commands: curl <link> -o <filename> Replacing <link> with the link Person 2 and 3 shared with Person 1 and <filename> with the filename of the Multisig info file that Person 2 or 3 generated, for example Person 1 will run the command: curl https://transfer.sh/Iedv9/mi2 -o mi2 And the command: curl https://transfer.sh/dfvr3/mi3 -o mi3 Likewise, Person 2 and 3 should do the same, changing directories to their loki-wallet-cli and downloading with the alternative Persons download link, and filename. curl https://transfer.sh/Ehl5q/mi1 -o mi1 Step 2 - Import Multisig \u00b6 Now, they must all import each other's file so they can be ready to make a TX later. For example, Person 2 commands: import_multisig_info mi1 The wallet will look for files in the shell working folder* and if the files are found the output will look like: 2 outputs found in mi1 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000 Persons 1 & 3 do the same. Spending \u00b6 Step 1 - Transfer (Preparing Unsigned Transaction) \u00b6 Any of the 3 persons can start a transaction, it doesn't matter. To avoid weird things from happening only do it for 1 transaction at a time. If anything weird happens, do the step 1 & 2 again to fix. For example, let's say that Person 3 will make the TX. Person 3 performs the usual transfer command: transfer T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7 50 The output will look like: Unsigned transaction(s) successfully written to file: multisig_loki_tx Check in the folder where you started loki-wallet-cli from*. There should be a file named multisig_loki_tx . Send the file multisig_loki_tx to either person 1 or 2. Person 3 will send the file multisig_loki_tx to the Person 1 or 2. Person 3 can send this file through email or alternatively use the transfer.sh commands outside of the wallet: curl --upload-file ./multisig_loki_tx https://transfer.sh/multisig_loki_tx If Person 3 chooses to use transfer.sh command to send the file to Person 1 or 2 they will receive a <link> . Person 1 or 2 must finish the signature. Person 1 or 2 copies/downloads the file to the same folder from where he started (or will start) loki-wallet-cli *. Person 1 or 2 can run the command to download the file to the loki-wallet-cli directory. curl https://transfer.sh/CJqnM/multisig_loki_tx -o multisig_loki_tx Replacing https://transfer.sh/CJqnM/multisig_loki_tx with the link provided by Person 3. Step 2 - Sign Multisig \u00b6 Let's say Person 2 was picked as the partner. He must finish the signature. Person 2 copies the file to the same folder from where he started (or will start) loki-wallet-cli *. Then, Person 2 commands: sign_multisig multisig_loki_tx and he/she will be prompted to check it first: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb> Step 3 - Submit Multisig \u00b6 Finally, person with the signed file submits the transaction to the network by commanding: submit_multisig multisig_loki_tx There will be a confirmation prompt: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the transaction will be sent. The output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb> You can check its status by using the show_transfers command. The person 2 could also send the signed TX to person 3, who could then submit it to the network himself. If you want to make another one, you have to go back to preparation for spending step (sync the key images again). *Note on folders and file locations, as it could create some confusions. The wallet will look for the files and export them to the folder from where it was started, ie where your command prompt / shell was when you called loki-wallet-cli . It may or may not be the same folder as your actual wallet files or loki-wallet-cli , depending on how you go about it. For example, your wallet could be on some USB drive like f:\\temp\\ , and your wallet software on c:\\loki\\ and your shell working folder could be c:\\ . If you remain in c:\\ with the shell, you could start the wallet by its full path and specify the wallet file location: c:\\loki\\loki-wallet-cli.exe --wallet-file f:\\temp\\mywallet . In this case, all the import/export stuff would be read/written to c:\\ because that's still your shell's working folder. It would be probably feel more natural to cd into the wallet folder. Do f: to change drive and then cd f:\\temp\\ . Then, simply start the wallet from that location by its full path again: c:\\loki\\loki-wallet-cli.exe --wallet-file mywallet . Notice how you don't have to write the full wallet path now as you're already there with your shell. In this case, all the files mentioned above would be written or read from the same folder as the wallet files. Source: Monero Stack Exchange: how to use monero multisigniture wallets","title":"2/3 Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#loki-23-multisig","text":"First, the wallet to be converted to multisig must be empty. It is best to use a brand-new wallet for the purpose, although not required. It is strongly advised to make a copy of the wallet files first, just in case something goes wrong.","title":"Loki 2/3 Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#overview","text":"In short, the process is: Wallet Creation All parties command prepare_multisig and send data to ALL other parties All parties command make_multisig <threshold> <data1> <data2> and send 2nd batch of data to ALL other parties All parties command finalize_multisig <data1> <data2> with the data from ALL other parties. Receiving All parties can type address to see the created multisig wallet address. The address will, of course, be the same for all parties since they're all watching the same wallet. Preparation for Sending To prepare for sending all parties command export_multisig_info <filename> and send the file to all other parties To complete preparation, all parties command import_multisig_info <filename1> <filename2> and import files from other parties Sending To send, any party can use the usual transfer command, but the result will be a file named multisig_loki_tx which must be sent to any 1 other signer The other party commands sign_multisig multisig_loki_tx and the file is updated with the signature. The completely signed file is pushed to the network with use of submit_multisig multisig_loki_tx . Below is a step-by-step walkthrough.","title":"Overview"},{"location":"Wallets/CliWallet/2of3Multisig/#wallet-creation","text":"Requirements: 3 empty loki-wallet-cli wallets All parties wallets connected to a lokid Private communication channel","title":"Wallet Creation"},{"location":"Wallets/CliWallet/2of3Multisig/#step-1-prepare-multisig","text":"Here some data will be shown to the user, which has to be exchanged with ALL other parties. Person 1, 2 and 3 commands: prepare_multisig The output will be something like: MultisigV1cR7X7ZAfa5ncRmQv1hpt4P1DmmnhinhokhDMqsmuWXmHFrb6xUr3FtBGygCfMScxnKJvXK1vvPNahXNWfYWVquieBErr98sFtgs24c2YuYrQT78uxV8oYx1A9bKeHSUfYzCniN5kMznEfvKCw3FiomjLvw364gg98ZWp16zA7pUVozid Send this multisig info to all other participants, then use make_multisig <threshold> <info1> [<info2>...] with others' multisig info This includes the PRIVATE view key, so needs to be disclosed only to that multisig wallet's participants Copy the entire line Multisig\u2026...Vozid and be sure to capture the whole thing when copying. Person 1 to send the Multsig...arg to Person 2 and 3, Person 2 to send their output to Person 1 and 3 and Person 3 to send their output to Person 1 and 2.","title":"Step 1 - Prepare Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#step-2-make-multisig","text":"All 3 persons now have the Multisig...arg text from the other 2. With that, each of them can create their part of the multisig wallet. Before you proceed, note that the wallet will lose access to the underlying wallet when converted to multisig. This is not really a problem, since we started with an empty wallet, and if all goes OK with this step, you won't ever need it unless you want to go through the process again for whatever reason (like HDD died, but you have the seed mnemonic of the underlying wallet and want to reconstruct the multisig wallet). Person 1 commands: make_multisig <threshold> <data person 2> <data person 3> Where <threshold> is the number of signers required out of the 3 people, <data person 2> is the output provided by Person 2, and <data person 3> is the output provided by Person 3. This should look similar to: make_multisig 2 MultisigV12EHtuvxFyAYDNcDsbDqWHDfkRr4JZchSdf8eZQSFwiMKDk15CYEJeQyEwtSnqUZdRr2BsEaT9z2biUdDTEQM4T3N625owvKMDoyhbRj3bwkBtceLKimap8DBAiUmSABpdf62HnPYiRtLW4JdVFmfqjndhWjYBypx1duvpi3qwfSrBY9a MultisigV1TqQ8Gt5Sb3GYtVJa1fQrK7e7hPm59XbooNvLxPSBR4856bW9jtD1hEyWy4yULKrX7reZZ6vrKdBCdSdk4nfApCGYJAA2WP4pKNwHDyKTuLEeuoDhqno8keEVeEF9AZsWXvng1avUTRREmy11h8wu8pdjopC4AguQKiHCJCN7aT9W6b8C Notice how there are 2 strings starting with Multisig....arg . One is from person 2 and other from person 3. The number at the beginning is the minimum required number of signatures. Since it's a 2/3 scheme - it's 2. The output from the make_multisig command will be similar to: Another step is needed MultisigxV1PKCwmVrucV8bXi18VnHFqRXcnAq4osFL3ahzPHCiN48zhs28u6jmEhy7ktZbUEGfRtTuFjjKzJYb61fnFwnysBBnNXsUtCgFMXPa7FyNKVy2AnUg3ePEnKqWkgKVvA81axTS8r9EX1DmVPXgFKkFzw4Yj4ZtMcJVo77b5ayuMzjFtsaijko9X2bjd9AVfFVGBFMCSLa4xXhNVNz19CTUJx5gpoPG Send this multisig info to all other participants, then use finalize_multisig <info1> [<info2>...] with others' multisig info With 2/3 there's an additional step to be done here. The new Multisig...arg info must be passed to ALL other participants (persons 2 & 3). Persons 2 & 3 do the same as above and send the info to other 2 parties.","title":"Step 2 - Make Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#step-3-finalize-multisig","text":"Here we do one last command to make the wallet ready for receiving. It requires the 2nd batch of Multisig\u2026....arg strings received from other parties. Person 1 will run the command: finalize_multisig MultisigxV1Vg1tsRLurvAc5aSA9Hd9God3MQhijCFoE1rPDFzx7ufwhs28u6jmEhy7ktZbUEGfRtTuFjjKzJYb61fnFwnysBBnfYm4xJWcJ4qM4khSb2KkyAKDuT39pTvdmemhojNjeYCmgSQ1NZLyBj48R1tVpiGNxa7TDnGbSgLuKBq35AX6jfu5PECAcDDn22CFQbJZip7xnBbn89Szzh27xeozfxcLiqqm MultisigxV14xDZBGACz3iUh2aVKGE5q5VzcvJdg2qCvZECgUWCdy5QNXsUtCgFMXPa7FyNKVy2AnUg3ePEnKqWkgKVvA81axTSfYm4xJWcJ4qM4khSb2KkyAKDuT39pTvdmemhojNjeYCmCNaRSsDEcemLLL8wCvzsy5R6hhkhWLYkD9vhZwprSFFKMZ7tfRko2VfMBoKQhB7PKXbf1npk2xceVKu2y7kExywb Unfortunately the wallet will not display an output at this point. There's no indication that the process was successfully completed (for now). All 3 persons do the same, and all 3 wallets will show the same address after this step. Now each person run the command: address And each 3 parties of the multisig wallet should be shown the same address in their wallet.","title":"Step 3 - Finalize Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#receiving","text":"","title":"Receiving"},{"location":"Wallets/CliWallet/2of3Multisig/#step-1-fund-the-multisig-account","text":"This is simple. Just send to the shared address. You can send multiple times, just like a normal wallet. You can use payment ID\u2019s as well, or generate an integrated address to receive funds. Best part, whomever is sending the funds won't be able to tell that the address belongs to a multisig wallet since it looks like any other Loki address.","title":"Step 1 Fund The Multisig Account"},{"location":"Wallets/CliWallet/2of3Multisig/#step-2-check-multisig-account-balance","text":"Just open the wallet and run the refresh command . Once completed, all persons can verify that the funds arrived. Person 1, 2 & 3 can run the command: show_transfers To see incoming transfers or the following command to see the balance of the wallet: balance","title":"Step 2 Check Multisig Account Balance"},{"location":"Wallets/CliWallet/2of3Multisig/#preparation-for-spending","text":"","title":"Preparation for Spending"},{"location":"Wallets/CliWallet/2of3Multisig/#step-1-export-multisig","text":"Without this step, it will not be possible to create a transaction that spends Loki. As a minimum, the sender needs to get a partial key image from the same person who will sign the transaction with him later. He could get from both parties immediately and then later decide with whom to sign. Person 1 commands: export_multisig_info mi1 Where mi1 can be any filename. The output will be: Multisig info exported to mi1 The file mi1 will be located in the shell working folder* Person 1 sends that file to other persons. Persons 2 & 3 do the same.","title":"Step 1 - Export Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#optional-step-12-sending-multisig-info-file-with-terminal-transfersh","text":"It is optional to use the terminal to send each person the multisig info files.","title":"Optional: Step 1.2 Sending Multisig Info File with terminal - transfer.sh"},{"location":"Wallets/CliWallet/2of3Multisig/#uploading-multisig-info-file","text":"Person 1 will open up a new terminal and change to the directory mi1 has been saved.* Person 1 will run the following command: curl --upload-file ./mi1 https://transfer.sh/mi1 Person 1 will receive the link to the file as an output, looking similar to: https://transfer.sh/Ehl5q/mi1 Person 1 will need to send this link to Person 2 and Person 3. Person 2 will need to do the same and send the link to Person 1 and 3. Person 3 will need to do the same and send the link to Person 1 and 2.","title":"Uploading Multisig Info file"},{"location":"Wallets/CliWallet/2of3Multisig/#downloading-multisig-info-file","text":"Person 1 should change to the directory of their loki-wallet-cli and use Person 2 and 3\u2019s download link to run the commands: curl <link> -o <filename> Replacing <link> with the link Person 2 and 3 shared with Person 1 and <filename> with the filename of the Multisig info file that Person 2 or 3 generated, for example Person 1 will run the command: curl https://transfer.sh/Iedv9/mi2 -o mi2 And the command: curl https://transfer.sh/dfvr3/mi3 -o mi3 Likewise, Person 2 and 3 should do the same, changing directories to their loki-wallet-cli and downloading with the alternative Persons download link, and filename. curl https://transfer.sh/Ehl5q/mi1 -o mi1","title":"Downloading Multisig Info file"},{"location":"Wallets/CliWallet/2of3Multisig/#step-2-import-multisig","text":"Now, they must all import each other's file so they can be ready to make a TX later. For example, Person 2 commands: import_multisig_info mi1 The wallet will look for files in the shell working folder* and if the files are found the output will look like: 2 outputs found in mi1 Height 1357156, transaction <88ba687dc79a0b39e6de6d0763eda8363d33d9f58ec9a096171bd9a7f1dae873>, received 0.100000000000 Height 1357161, transaction <d6ac845b9400759525519cdc5d514eb8f5b1d265b24d1c016e75b20ed3b4b7da>, received 0.100000000000 Persons 1 & 3 do the same.","title":"Step 2 - Import Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#spending","text":"","title":"Spending"},{"location":"Wallets/CliWallet/2of3Multisig/#step-1-transfer-preparing-unsigned-transaction","text":"Any of the 3 persons can start a transaction, it doesn't matter. To avoid weird things from happening only do it for 1 transaction at a time. If anything weird happens, do the step 1 & 2 again to fix. For example, let's say that Person 3 will make the TX. Person 3 performs the usual transfer command: transfer T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7 50 The output will look like: Unsigned transaction(s) successfully written to file: multisig_loki_tx Check in the folder where you started loki-wallet-cli from*. There should be a file named multisig_loki_tx . Send the file multisig_loki_tx to either person 1 or 2. Person 3 will send the file multisig_loki_tx to the Person 1 or 2. Person 3 can send this file through email or alternatively use the transfer.sh commands outside of the wallet: curl --upload-file ./multisig_loki_tx https://transfer.sh/multisig_loki_tx If Person 3 chooses to use transfer.sh command to send the file to Person 1 or 2 they will receive a <link> . Person 1 or 2 must finish the signature. Person 1 or 2 copies/downloads the file to the same folder from where he started (or will start) loki-wallet-cli *. Person 1 or 2 can run the command to download the file to the loki-wallet-cli directory. curl https://transfer.sh/CJqnM/multisig_loki_tx -o multisig_loki_tx Replacing https://transfer.sh/CJqnM/multisig_loki_tx with the link provided by Person 3.","title":"Step 1 - Transfer (Preparing Unsigned Transaction)"},{"location":"Wallets/CliWallet/2of3Multisig/#step-2-sign-multisig","text":"Let's say Person 2 was picked as the partner. He must finish the signature. Person 2 copies the file to the same folder from where he started (or will start) loki-wallet-cli *. Then, Person 2 commands: sign_multisig multisig_loki_tx and he/she will be prompted to check it first: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb>","title":"Step 2 - Sign Multisig"},{"location":"Wallets/CliWallet/2of3Multisig/#step-3-submit-multisig","text":"Finally, person with the signed file submits the transaction to the network by commanding: submit_multisig multisig_loki_tx There will be a confirmation prompt: Loaded 1 transactions, for 108.082287779, fee 0.061108880, sending 50.000000000 to T6TmZX8EzZVjS9zNg7zAsrEQFDgcVC2qV2ZMyoWsbyK4SNB2SwMHZtMhPSsFyTmRBQUaGVF5k3qy5CMFM6Lvj7gi3AeszDag7, 58.021178899 change to T6ScXhWpAG2aUHmFemwvn4HddHA5GQ4u6MvYsW2hVteJSwLJXCEhk2aVp4XzyqGmvyUqc3w8fwWwg6szGEytUSx51C6WQ3er8, with min ring size 10, no payment ID. Is this okay? (Y/Yes/N/No): If ok, answer Y , and the transaction will be sent. The output will look like: Transaction successfully submitted, transaction <3b03b16c79eaa5564171ae88242c4cdb1f9e0b41fc3de949c6524c5026a3f3bb> You can check its status by using the show_transfers command. The person 2 could also send the signed TX to person 3, who could then submit it to the network himself. If you want to make another one, you have to go back to preparation for spending step (sync the key images again). *Note on folders and file locations, as it could create some confusions. The wallet will look for the files and export them to the folder from where it was started, ie where your command prompt / shell was when you called loki-wallet-cli . It may or may not be the same folder as your actual wallet files or loki-wallet-cli , depending on how you go about it. For example, your wallet could be on some USB drive like f:\\temp\\ , and your wallet software on c:\\loki\\ and your shell working folder could be c:\\ . If you remain in c:\\ with the shell, you could start the wallet by its full path and specify the wallet file location: c:\\loki\\loki-wallet-cli.exe --wallet-file f:\\temp\\mywallet . In this case, all the import/export stuff would be read/written to c:\\ because that's still your shell's working folder. It would be probably feel more natural to cd into the wallet folder. Do f: to change drive and then cd f:\\temp\\ . Then, simply start the wallet from that location by its full path again: c:\\loki\\loki-wallet-cli.exe --wallet-file mywallet . Notice how you don't have to write the full wallet path now as you're already there with your shell. In this case, all the files mentioned above would be written or read from the same folder as the wallet files. Source: Monero Stack Exchange: how to use monero multisigniture wallets","title":"Step 3 - Submit Multisig"},{"location":"Wallets/CliWallet/CLIOverview/","text":"","title":"CLI Overview"},{"location":"Wallets/CliWallet/CompilingGuide/","text":"Compiling Loki from source \u00b6 Dependencies \u00b6 The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Optional Purpose GCC 4.7.3 NO build-essential base-devel NO CMake 3.0.0 NO cmake cmake NO pkg-config any NO pkg-config base-devel NO Boost 1.58 NO libboost-all-dev boost NO C++ libraries OpenSSL basically any NO libssl-dev openssl NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq NO ZeroMQ library libunbound 1.4.16 YES libunbound-dev unbound NO DNS resolver libsodium ? NO libsodium-dev ? NO libsodium libminiupnpc 2.0 YES libminiupnpc-dev miniupnpc YES NAT punching libunwind any NO libunwind8-dev libunwind YES Stack traces liblzma any NO liblzma-dev xz YES For libunwind libreadline 6.3.0 NO libreadline6-dev readline YES Input editing ldns 1.6.17 NO libldns-dev ldns YES SSL toolkit expat 1.1 NO libexpat1-dev expat YES XML parsing GTest 1.5 YES libgtest-dev ^ gtest YES Test suite Doxygen any NO doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz YES Documentation [^] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ Cloning the repository \u00b6 Clone recursively to pull-in needed submodule(s): $ git clone --recursive https://github.com/loki-project/loki If you already have a repo cloned, initialize and update: $ cd loki && git submodule init && git submodule update Build instructions \u00b6 Loki uses the CMake build system and a top-level Makefile that invokes cmake commands as needed. On Linux and OS X \u00b6 Install the dependencies Change to the root of the source code directory and build: cd loki make Optional : If your machine has several cores and enough memory, enable parallel build by running make -j<number of threads> instead of make . For this to be worthwhile, the machine should have one core and about 2GB of RAM available per thread. Note : If cmake can not find zmq.hpp file on OS X, installing zmq.hpp from https://github.com/zeromq/cppzmq to /usr/local/include should fix that error. The resulting executables can be found in build/release/bin Add PATH=\"$PATH:$HOME/loki/build/release/bin\" to .profile Run Loki with lokid --detach Optional : build and run the test suite to verify the binaries: make release-test NOTE : core_tests test may take a few hours to complete. Optional : to build binaries suitable for debugging: make debug Optional : to build statically-linked binaries: make release-static Dependencies need to be built with -fPIC. Static libraries usually aren't, so you may have to build them yourself with -fPIC. Refer to their documentation for how to build them. Optional : build documentation in doc/html (omit HAVE_DOT=YES if graphviz is not installed): HAVE_DOT=YES doxygen Doxyfile On the Raspberry Pi \u00b6 Tested on a Raspberry Pi Zero with a clean install of minimal Raspbian Stretch (2017-09-07 or later) from https://www.raspberrypi.org/downloads/raspbian/. If you are using Raspian Jessie, please see note in the following section . apt-get update && apt-get upgrade to install all of the latest software Install the dependencies for Loki from the 'Debian' column in the table above. Increase the system swap size: sudo /etc/init.d/dphys-swapfile stop sudo nano /etc/dphys-swapfile CONF_SWAPSIZE=1024 sudo /etc/init.d/dphys-swapfile start Clone loki and checkout most recent release version: git clone https://github.com/loki-project/loki.git cd loki git checkout tags/v0.11.0.0 Build: make release Wait 4-6 hours The resulting executables can be found in build/release/bin Add PATH=\"$PATH:$HOME/loki/build/release/bin\" to .profile Run Loki with lokid --detach You may wish to reduce the size of the swap file after the build has finished, and delete the boost directory from your home directory Note for Raspbian Jessie users: \u00b6 If you are using the older Raspbian Jessie image, compiling Loki is a bit more complicated. The version of Boost available in the Debian Jessie repositories is too old to use with Loki, and thus you must compile a newer version yourself. The following explains the extra steps, and has been tested on a Raspberry Pi 2 with a clean install of minimal Raspbian Jessie. As before, apt-get update && apt-get upgrade to install all of the latest software, and increase the system swap size sudo /etc/init.d/dphys-swapfile stop sudo nano /etc/dphys-swapfile CONF_SWAPSIZE=1024 sudo /etc/init.d/dphys-swapfile start Then, install the dependencies for Loki except libunwind and libboost-all-dev Install the latest version of boost (this may first require invoking apt-get remove --purge libboost* to remove a previous version if you're not using a clean install): cd wget https://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.bz2 tar xvfo boost_1_64_0.tar.bz2 cd boost_1_64_0 ./bootstrap.sh sudo ./b2 Wait ~8 hours sudo ./bjam install Wait ~4 hours From here, follow the general Raspberry Pi instructions from the \"Clone loki and checkout most recent release version\" step. On Windows: \u00b6 Binaries for Windows are built on Windows using the MinGW toolchain within MSYS2 environment . The MSYS2 environment emulates a POSIX system. The toolchain runs within the environment and cross-compiles binaries that can run outside of the environment as a regular Windows application. Preparing the build environment Download and install the MSYS2 installer , either the 64-bit or the 32-bit package, depending on your system. Open the MSYS shell via the MSYS2 Shell shortcut Update packages using pacman: pacman -Syuu Exit the MSYS shell using Alt+F4 Edit the properties for the MSYS2 Shell shortcut changing \"msys2_shell.bat\" to \"msys2_shell.cmd -mingw64\" for 64-bit builds or \"msys2_shell.cmd -mingw32\" for 32-bit builds Restart MSYS shell via modified shortcut and update packages again using pacman: pacman -Syuu Install dependencies: To build for 64-bit Windows: pacman -S mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium To build for 32-bit Windows: pacman -S mingw-w64-i686-toolchain make mingw-w64-i686-cmake mingw-w64-i686-boost mingw-w64-i686-openssl mingw-w64-i686-zeromq mingw-w64-i686-libsodium Open the MingW shell via MinGW-w64-Win64 Shell shortcut on 64-bit Windows or MinGW-w64-Win64 Shell shortcut on 32-bit Windows. Note that if you are running 64-bit Windows, you will have both 64-bit and 32-bit MinGW shells. Building If you are on a 64-bit system, run: make release-static-win64 If you are on a 32-bit system, run: make release-static-win32 The resulting executables can be found in build/release/bin On FreeBSD: \u00b6 The project can be built from scratch by following instructions for Linux above. If you are running loki in a jail you need to add the flag: allow.sysvipc=1 to your jail configuration, otherwise lmdb will throw the error message: Failed to open lmdb environment: Function not implemented . On OpenBSD: \u00b6 OpenBSD < 6.2 \u00b6 This has been tested on OpenBSD 5.8. You will need to add a few packages to your system. pkg_add db cmake gcc gcc-libs g++ miniupnpc gtest . The doxygen and graphviz packages are optional and require the xbase set. The Boost package has a bug that will prevent librpc.a from building correctly. In order to fix this, you will have to Build boost yourself from scratch. Follow the directions here (under \"Building Boost\"): https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md You will have to add the serialization, date_time, and regex modules to Boost when building as they are needed by Loki. To build: env CC=egcc CXX=eg++ CPP=ecpp DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/path/to/the/boost/you/built make release-static-64 OpenBSD >= 6.2 \u00b6 You will need to add a few packages to your system. pkg_add cmake miniupnpc zeromq libiconv . The doxygen and graphviz packages are optional and require the xbase set. Build the Boost library using clang. This guide is derived from: https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md We assume you are compiling with a non-root user and you have doas enabled. Note: do not use the boost package provided by OpenBSD, as we are installing boost to /usr/local . # Create boost building directory mkdir ~/boost cd ~/boost # Fetch boost source ftp -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2 # MUST output: (SHA256) boost_1_64_0.tar.bz2: OK echo \"7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2\" | sha256 -c tar xfj boost_1_64_0.tar.bz2 # Fetch and apply boost patches, required for OpenBSD ftp -o boost_test_impl_execution_monitor_ipp.patch https://raw.githubusercontent.com/openbsd/ports/bee9e6df517077a7269ff0dfd57995f5c6a10379/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp ftp -o boost_config_platform_bsd_hpp.patch https://raw.githubusercontent.com/openbsd/ports/90658284fb786f5a60dd9d6e8d14500c167bdaa0/devel/boost/patches/patch-boost_config_platform_bsd_hpp # MUST output: (SHA256) boost_config_platform_bsd_hpp.patch: OK echo \"1f5e59d1154f16ee1e0cc169395f30d5e7d22a5bd9f86358f738b0ccaea5e51d boost_config_platform_bsd_hpp.patch\" | sha256 -c # MUST output: (SHA256) boost_test_impl_execution_monitor_ipp.patch: OK echo \"30cec182a1437d40c3e0bd9a866ab5ddc1400a56185b7e671bb3782634ed0206 boost_test_impl_execution_monitor_ipp.patch\" | sha256 -c cd boost_1_64_0 patch -p0 < ../boost_test_impl_execution_monitor_ipp.patch patch -p0 < ../boost_config_platform_bsd_hpp.patch # Start building boost echo 'using clang : : c++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\" <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam ./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test,date_time,regex,serialization,locale --with-toolset=clang ./b2 toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" -sICONV_PATH=/usr/local doas ./b2 -d0 runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1 -sICONV_PATH=/usr/local --prefix=/usr/local install Build cppzmq Build the cppzmq bindings. We assume you are compiling with a non-root user and you have doas enabled. # Create cppzmq building directory mkdir ~/cppzmq cd ~/cppzmq # Fetch cppzmq source ftp -o cppzmq-4.2.3.tar.gz https://github.com/zeromq/cppzmq/archive/v4.2.3.tar.gz # MUST output: (SHA256) cppzmq-4.2.3.tar.gz: OK echo \"3e6b57bf49115f4ae893b1ff7848ead7267013087dc7be1ab27636a97144d373 cppzmq-4.2.3.tar.gz\" | sha256 -c tar xfz cppzmq-4.2.3.tar.gz # Start building cppzmq cd cppzmq-4.2.3 mkdir build cd build cmake .. doas make install Build loki: env DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/usr/local make release-static On Solaris: \u00b6 The default Solaris linker can't be used, you have to install GNU ld, then run cmake manually with the path to your copy of GNU ld: mkdir -p build/release cd build/release cmake -DCMAKE_LINKER=/path/to/ld -D CMAKE_BUILD_TYPE=Release ../.. cd ../.. Then you can run make as usual. On Linux for Android (using docker): \u00b6 # Build image (select android64.Dockerfile for aarch64) cd utils/build_scripts/ &amp;&amp; docker build -f android32.Dockerfile -t loki-android . # Create container docker create -it --name loki-android loki-android bash # Get binaries docker cp loki-android:/opt/android/loki/build/release/bin . Building portable statically linked binaries \u00b6 By default, in either dynamically or statically linked builds, binaries target the specific host processor on which the build happens and are not portable to other processors. Portable binaries can be built using the following targets: make release-static-linux-x86_64 builds binaries on Linux on x86_64 portable across POSIX systems on x86_64 processors make release-static-linux-i686 builds binaries on Linux on x86_64 or i686 portable across POSIX systems on i686 processors make release-static-linux-armv8 builds binaries on Linux portable across POSIX systems on armv8 processors make release-static-linux-armv7 builds binaries on Linux portable across POSIX systems on armv7 processors make release-static-linux-armv6 builds binaries on Linux portable across POSIX systems on armv6 processors make release-static-win64 builds binaries on 64-bit Windows portable across 64-bit Windows systems make release-static-win32 builds binaries on 64-bit or 32-bit Windows portable across 32-bit Windows systems Running lokid \u00b6 The build places the binary in bin/ sub-directory within the build directory from which cmake was invoked (repository root by default). To run in foreground: ./bin/lokid To list all available options, run ./bin/lokid --help . Options can be specified either on the command line or in a configuration file passed by the --config-file argument. To specify an option in the configuration file, add a line with the syntax argumentname=value , where argumentname is the name of the argument without the leading dashes, for example log-level=1 . To run in background: ./bin/lokid --log-file lokid.log --detach Internationalization \u00b6 See Internationalization .","title":"Compiling Loki from source"},{"location":"Wallets/CliWallet/CompilingGuide/#compiling-loki-from-source","text":"","title":"Compiling Loki from source"},{"location":"Wallets/CliWallet/CompilingGuide/#dependencies","text":"The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Optional Purpose GCC 4.7.3 NO build-essential base-devel NO CMake 3.0.0 NO cmake cmake NO pkg-config any NO pkg-config base-devel NO Boost 1.58 NO libboost-all-dev boost NO C++ libraries OpenSSL basically any NO libssl-dev openssl NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq NO ZeroMQ library libunbound 1.4.16 YES libunbound-dev unbound NO DNS resolver libsodium ? NO libsodium-dev ? NO libsodium libminiupnpc 2.0 YES libminiupnpc-dev miniupnpc YES NAT punching libunwind any NO libunwind8-dev libunwind YES Stack traces liblzma any NO liblzma-dev xz YES For libunwind libreadline 6.3.0 NO libreadline6-dev readline YES Input editing ldns 1.6.17 NO libldns-dev ldns YES SSL toolkit expat 1.1 NO libexpat1-dev expat YES XML parsing GTest 1.5 YES libgtest-dev ^ gtest YES Test suite Doxygen any NO doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz YES Documentation [^] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/","title":"Dependencies"},{"location":"Wallets/CliWallet/CompilingGuide/#cloning-the-repository","text":"Clone recursively to pull-in needed submodule(s): $ git clone --recursive https://github.com/loki-project/loki If you already have a repo cloned, initialize and update: $ cd loki && git submodule init && git submodule update","title":"Cloning the repository"},{"location":"Wallets/CliWallet/CompilingGuide/#build-instructions","text":"Loki uses the CMake build system and a top-level Makefile that invokes cmake commands as needed.","title":"Build instructions"},{"location":"Wallets/CliWallet/CompilingGuide/#on-linux-and-os-x","text":"Install the dependencies Change to the root of the source code directory and build: cd loki make Optional : If your machine has several cores and enough memory, enable parallel build by running make -j<number of threads> instead of make . For this to be worthwhile, the machine should have one core and about 2GB of RAM available per thread. Note : If cmake can not find zmq.hpp file on OS X, installing zmq.hpp from https://github.com/zeromq/cppzmq to /usr/local/include should fix that error. The resulting executables can be found in build/release/bin Add PATH=\"$PATH:$HOME/loki/build/release/bin\" to .profile Run Loki with lokid --detach Optional : build and run the test suite to verify the binaries: make release-test NOTE : core_tests test may take a few hours to complete. Optional : to build binaries suitable for debugging: make debug Optional : to build statically-linked binaries: make release-static Dependencies need to be built with -fPIC. Static libraries usually aren't, so you may have to build them yourself with -fPIC. Refer to their documentation for how to build them. Optional : build documentation in doc/html (omit HAVE_DOT=YES if graphviz is not installed): HAVE_DOT=YES doxygen Doxyfile","title":"On Linux and OS X"},{"location":"Wallets/CliWallet/CompilingGuide/#on-the-raspberry-pi","text":"Tested on a Raspberry Pi Zero with a clean install of minimal Raspbian Stretch (2017-09-07 or later) from https://www.raspberrypi.org/downloads/raspbian/. If you are using Raspian Jessie, please see note in the following section . apt-get update && apt-get upgrade to install all of the latest software Install the dependencies for Loki from the 'Debian' column in the table above. Increase the system swap size: sudo /etc/init.d/dphys-swapfile stop sudo nano /etc/dphys-swapfile CONF_SWAPSIZE=1024 sudo /etc/init.d/dphys-swapfile start Clone loki and checkout most recent release version: git clone https://github.com/loki-project/loki.git cd loki git checkout tags/v0.11.0.0 Build: make release Wait 4-6 hours The resulting executables can be found in build/release/bin Add PATH=\"$PATH:$HOME/loki/build/release/bin\" to .profile Run Loki with lokid --detach You may wish to reduce the size of the swap file after the build has finished, and delete the boost directory from your home directory","title":"On the Raspberry Pi"},{"location":"Wallets/CliWallet/CompilingGuide/#note-for-raspbian-jessie-users","text":"If you are using the older Raspbian Jessie image, compiling Loki is a bit more complicated. The version of Boost available in the Debian Jessie repositories is too old to use with Loki, and thus you must compile a newer version yourself. The following explains the extra steps, and has been tested on a Raspberry Pi 2 with a clean install of minimal Raspbian Jessie. As before, apt-get update && apt-get upgrade to install all of the latest software, and increase the system swap size sudo /etc/init.d/dphys-swapfile stop sudo nano /etc/dphys-swapfile CONF_SWAPSIZE=1024 sudo /etc/init.d/dphys-swapfile start Then, install the dependencies for Loki except libunwind and libboost-all-dev Install the latest version of boost (this may first require invoking apt-get remove --purge libboost* to remove a previous version if you're not using a clean install): cd wget https://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.bz2 tar xvfo boost_1_64_0.tar.bz2 cd boost_1_64_0 ./bootstrap.sh sudo ./b2 Wait ~8 hours sudo ./bjam install Wait ~4 hours From here, follow the general Raspberry Pi instructions from the \"Clone loki and checkout most recent release version\" step.","title":"Note for Raspbian Jessie users:"},{"location":"Wallets/CliWallet/CompilingGuide/#on-windows","text":"Binaries for Windows are built on Windows using the MinGW toolchain within MSYS2 environment . The MSYS2 environment emulates a POSIX system. The toolchain runs within the environment and cross-compiles binaries that can run outside of the environment as a regular Windows application. Preparing the build environment Download and install the MSYS2 installer , either the 64-bit or the 32-bit package, depending on your system. Open the MSYS shell via the MSYS2 Shell shortcut Update packages using pacman: pacman -Syuu Exit the MSYS shell using Alt+F4 Edit the properties for the MSYS2 Shell shortcut changing \"msys2_shell.bat\" to \"msys2_shell.cmd -mingw64\" for 64-bit builds or \"msys2_shell.cmd -mingw32\" for 32-bit builds Restart MSYS shell via modified shortcut and update packages again using pacman: pacman -Syuu Install dependencies: To build for 64-bit Windows: pacman -S mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium To build for 32-bit Windows: pacman -S mingw-w64-i686-toolchain make mingw-w64-i686-cmake mingw-w64-i686-boost mingw-w64-i686-openssl mingw-w64-i686-zeromq mingw-w64-i686-libsodium Open the MingW shell via MinGW-w64-Win64 Shell shortcut on 64-bit Windows or MinGW-w64-Win64 Shell shortcut on 32-bit Windows. Note that if you are running 64-bit Windows, you will have both 64-bit and 32-bit MinGW shells. Building If you are on a 64-bit system, run: make release-static-win64 If you are on a 32-bit system, run: make release-static-win32 The resulting executables can be found in build/release/bin","title":"On Windows:"},{"location":"Wallets/CliWallet/CompilingGuide/#on-freebsd","text":"The project can be built from scratch by following instructions for Linux above. If you are running loki in a jail you need to add the flag: allow.sysvipc=1 to your jail configuration, otherwise lmdb will throw the error message: Failed to open lmdb environment: Function not implemented .","title":"On FreeBSD:"},{"location":"Wallets/CliWallet/CompilingGuide/#on-openbsd","text":"","title":"On OpenBSD:"},{"location":"Wallets/CliWallet/CompilingGuide/#openbsd-62","text":"This has been tested on OpenBSD 5.8. You will need to add a few packages to your system. pkg_add db cmake gcc gcc-libs g++ miniupnpc gtest . The doxygen and graphviz packages are optional and require the xbase set. The Boost package has a bug that will prevent librpc.a from building correctly. In order to fix this, you will have to Build boost yourself from scratch. Follow the directions here (under \"Building Boost\"): https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md You will have to add the serialization, date_time, and regex modules to Boost when building as they are needed by Loki. To build: env CC=egcc CXX=eg++ CPP=ecpp DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/path/to/the/boost/you/built make release-static-64","title":"OpenBSD &lt; 6.2"},{"location":"Wallets/CliWallet/CompilingGuide/#openbsd-62_1","text":"You will need to add a few packages to your system. pkg_add cmake miniupnpc zeromq libiconv . The doxygen and graphviz packages are optional and require the xbase set. Build the Boost library using clang. This guide is derived from: https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md We assume you are compiling with a non-root user and you have doas enabled. Note: do not use the boost package provided by OpenBSD, as we are installing boost to /usr/local . # Create boost building directory mkdir ~/boost cd ~/boost # Fetch boost source ftp -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2 # MUST output: (SHA256) boost_1_64_0.tar.bz2: OK echo \"7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2\" | sha256 -c tar xfj boost_1_64_0.tar.bz2 # Fetch and apply boost patches, required for OpenBSD ftp -o boost_test_impl_execution_monitor_ipp.patch https://raw.githubusercontent.com/openbsd/ports/bee9e6df517077a7269ff0dfd57995f5c6a10379/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp ftp -o boost_config_platform_bsd_hpp.patch https://raw.githubusercontent.com/openbsd/ports/90658284fb786f5a60dd9d6e8d14500c167bdaa0/devel/boost/patches/patch-boost_config_platform_bsd_hpp # MUST output: (SHA256) boost_config_platform_bsd_hpp.patch: OK echo \"1f5e59d1154f16ee1e0cc169395f30d5e7d22a5bd9f86358f738b0ccaea5e51d boost_config_platform_bsd_hpp.patch\" | sha256 -c # MUST output: (SHA256) boost_test_impl_execution_monitor_ipp.patch: OK echo \"30cec182a1437d40c3e0bd9a866ab5ddc1400a56185b7e671bb3782634ed0206 boost_test_impl_execution_monitor_ipp.patch\" | sha256 -c cd boost_1_64_0 patch -p0 < ../boost_test_impl_execution_monitor_ipp.patch patch -p0 < ../boost_config_platform_bsd_hpp.patch # Start building boost echo 'using clang : : c++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\" <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam ./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test,date_time,regex,serialization,locale --with-toolset=clang ./b2 toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" -sICONV_PATH=/usr/local doas ./b2 -d0 runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1 -sICONV_PATH=/usr/local --prefix=/usr/local install Build cppzmq Build the cppzmq bindings. We assume you are compiling with a non-root user and you have doas enabled. # Create cppzmq building directory mkdir ~/cppzmq cd ~/cppzmq # Fetch cppzmq source ftp -o cppzmq-4.2.3.tar.gz https://github.com/zeromq/cppzmq/archive/v4.2.3.tar.gz # MUST output: (SHA256) cppzmq-4.2.3.tar.gz: OK echo \"3e6b57bf49115f4ae893b1ff7848ead7267013087dc7be1ab27636a97144d373 cppzmq-4.2.3.tar.gz\" | sha256 -c tar xfz cppzmq-4.2.3.tar.gz # Start building cppzmq cd cppzmq-4.2.3 mkdir build cd build cmake .. doas make install Build loki: env DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/usr/local make release-static","title":"OpenBSD &gt;= 6.2"},{"location":"Wallets/CliWallet/CompilingGuide/#on-solaris","text":"The default Solaris linker can't be used, you have to install GNU ld, then run cmake manually with the path to your copy of GNU ld: mkdir -p build/release cd build/release cmake -DCMAKE_LINKER=/path/to/ld -D CMAKE_BUILD_TYPE=Release ../.. cd ../.. Then you can run make as usual.","title":"On Solaris:"},{"location":"Wallets/CliWallet/CompilingGuide/#on-linux-for-android-using-docker","text":"# Build image (select android64.Dockerfile for aarch64) cd utils/build_scripts/ &amp;&amp; docker build -f android32.Dockerfile -t loki-android . # Create container docker create -it --name loki-android loki-android bash # Get binaries docker cp loki-android:/opt/android/loki/build/release/bin .","title":"On Linux for Android (using docker):"},{"location":"Wallets/CliWallet/CompilingGuide/#building-portable-statically-linked-binaries","text":"By default, in either dynamically or statically linked builds, binaries target the specific host processor on which the build happens and are not portable to other processors. Portable binaries can be built using the following targets: make release-static-linux-x86_64 builds binaries on Linux on x86_64 portable across POSIX systems on x86_64 processors make release-static-linux-i686 builds binaries on Linux on x86_64 or i686 portable across POSIX systems on i686 processors make release-static-linux-armv8 builds binaries on Linux portable across POSIX systems on armv8 processors make release-static-linux-armv7 builds binaries on Linux portable across POSIX systems on armv7 processors make release-static-linux-armv6 builds binaries on Linux portable across POSIX systems on armv6 processors make release-static-win64 builds binaries on 64-bit Windows portable across 64-bit Windows systems make release-static-win32 builds binaries on 64-bit or 32-bit Windows portable across 32-bit Windows systems","title":"Building portable statically linked binaries"},{"location":"Wallets/CliWallet/CompilingGuide/#running-lokid","text":"The build places the binary in bin/ sub-directory within the build directory from which cmake was invoked (repository root by default). To run in foreground: ./bin/lokid To list all available options, run ./bin/lokid --help . Options can be specified either on the command line or in a configuration file passed by the --config-file argument. To specify an option in the configuration file, add a line with the syntax argumentname=value , where argumentname is the name of the argument without the leading dashes, for example log-level=1 . To run in background: ./bin/lokid --log-file lokid.log --detach","title":"Running lokid"},{"location":"Wallets/CliWallet/CompilingGuide/#internationalization","text":"See Internationalization .","title":"Internationalization"},{"location":"Wallets/CliWallet/Debugging/","text":"Debugging \u00b6 This section contains general instructions for debugging failed installs or problems encountered with Loki. First ensure you are running the latest version built from the Github repo. Obtaining stack traces and core dumps on Unix systems \u00b6 We generally use the tool gdb (GNU debugger) to provide stack trace functionality, and ulimit to provide core dumps in builds which crash or segfault. To use gdb in order to obtain a stack trace for a build that has stalled: Run the build. Once it stalls, enter the following command: gdb /path/to/lokid `pidof lokid` Type thread apply all bt within gdb in order to obtain the stack trace If however the core dumps or segfaults: Enter ulimit -c unlimited on the command line to enable unlimited filesizes for core dumps Enter echo core | sudo tee /proc/sys/kernel/core_pattern to stop cores from being hijacked by other tools Run the build. When it terminates with an output along the lines of \"Segmentation fault (core dumped)\", there should be a core dump file in the same directory as lokid. It may be named just core , or core.xxxx with numbers appended. You can now analyse this core dump with gdb as follows: gdb /path/to/lokid /path/to/dumpfile Print the stack trace with bt To run loki within gdb: Type gdb /path/to/lokid Pass command-line options with --args followed by the relevant arguments Type run to run lokid Analysing memory corruption \u00b6 We use the tool valgrind for this. Run with valgrind /path/to/lokid . It will be slow. LMDB \u00b6 Instructions for debugging suspected blockchain corruption as per @HYC There is an mdb_stat command in the LMDB source that can print statistics about the database but it's not routinely built. This can be built with the following command: cd ~/loki/external/db_drivers/liblmdb && make The output of mdb_stat -ea <path to blockchain dir> will indicate inconsistencies in the blocks, block_heights and block_info table. The output of mdb_dump -s blocks <path to blockchain dir> and mdb_dump -s block_info <path to blockchain dir> is useful for indicating whether blocks and block_info contain the same keys. These records are dumped as hex data, where the first line is the key and the second line is the data.","title":"Debugging"},{"location":"Wallets/CliWallet/Debugging/#debugging","text":"This section contains general instructions for debugging failed installs or problems encountered with Loki. First ensure you are running the latest version built from the Github repo.","title":"Debugging"},{"location":"Wallets/CliWallet/Debugging/#obtaining-stack-traces-and-core-dumps-on-unix-systems","text":"We generally use the tool gdb (GNU debugger) to provide stack trace functionality, and ulimit to provide core dumps in builds which crash or segfault. To use gdb in order to obtain a stack trace for a build that has stalled: Run the build. Once it stalls, enter the following command: gdb /path/to/lokid `pidof lokid` Type thread apply all bt within gdb in order to obtain the stack trace If however the core dumps or segfaults: Enter ulimit -c unlimited on the command line to enable unlimited filesizes for core dumps Enter echo core | sudo tee /proc/sys/kernel/core_pattern to stop cores from being hijacked by other tools Run the build. When it terminates with an output along the lines of \"Segmentation fault (core dumped)\", there should be a core dump file in the same directory as lokid. It may be named just core , or core.xxxx with numbers appended. You can now analyse this core dump with gdb as follows: gdb /path/to/lokid /path/to/dumpfile Print the stack trace with bt To run loki within gdb: Type gdb /path/to/lokid Pass command-line options with --args followed by the relevant arguments Type run to run lokid","title":"Obtaining stack traces and core dumps on Unix systems"},{"location":"Wallets/CliWallet/Debugging/#analysing-memory-corruption","text":"We use the tool valgrind for this. Run with valgrind /path/to/lokid . It will be slow.","title":"Analysing memory corruption"},{"location":"Wallets/CliWallet/Debugging/#lmdb","text":"Instructions for debugging suspected blockchain corruption as per @HYC There is an mdb_stat command in the LMDB source that can print statistics about the database but it's not routinely built. This can be built with the following command: cd ~/loki/external/db_drivers/liblmdb && make The output of mdb_stat -ea <path to blockchain dir> will indicate inconsistencies in the blocks, block_heights and block_info table. The output of mdb_dump -s blocks <path to blockchain dir> and mdb_dump -s block_info <path to blockchain dir> is useful for indicating whether blocks and block_info contain the same keys. These records are dumped as hex data, where the first line is the key and the second line is the data.","title":"LMDB"},{"location":"Wallets/CliWallet/SNFullGuide/","text":"Full Guide on Service Nodes \u00b6 This document will tell you exactly how to set up and operate a Service Node for the Loki Project. This document was written with non-developers in mind, so people new to linux or command line operations should be able to follow along without any trouble. Also available is a video guide, which provides a more simplified version of the written guide, it can be viewed here If you feel confident around servers and the CLI, then skip to the Express Setup Guide You can of course run the Loki software on any operating system that you can get it to build on, but for the purposes of this document, the instructions apply to running a Service Node on a remote Ubuntu 16.04 server. If that isn\u2019t what you want to do, syntax and server set up will of course differ according to whatever OS you choose to run your Service Node from. Summary of Loki Service Node Requirements \u00b6 Full summary of Loki Service Node Requirements. This may change depending on Service Node functionality, so you should check here regularly, or follow our telegram/discord announcements channel. Spec Note Latest Binary loki-linux-x64-1.0.3 Software Ubuntu 16.04 Memory 30-50gb Ram 2-4 gb Table of Contents \u00b6 Overview of Service Nodes New User Guide Step 1 Server Step 2 Server Prep Step 3 Download Binaries Step 4 Run the Loki Daemon Step 5 Open a Loki Wallet Step 6 Register Node Step 7 Check Registration Express Setup Guide Additional Functions Overview \u00b6 To understand what a Service Node is, you can refer to the whitepaper to get an in depth understanding. For now, all you need to know is that: Service Nodes are full nodes on the Loki network Full nodes become Service Nodes when the owner locks the required amount of Loki for 30 days (2 days on testnet) and submits a registration transaction Once accepted by the network, the Service Node is eligible to win block rewards Multiple participants can be involved in one Service Node and can have the reward automatically distributed It is also worth noting that Service Nodes are quite basic at the moment, and operators will need to stay up to date with new updates to keep in line with software and hardware requirements. Once all of the updates are out, Service Nodes will also: Route end user\u2019s internet traffic, either as an exit node or relay in a novel mixnet Receive, store and forward encrypted user messages Monitor other Service Nodes and vote on their performance Be called into quorums which give them authority over instant transactions (Blink) Act as remote nodes for users Once these features come out, Service Node operation will require better servers, particularly when it comes to bandwidth. For the purposes of this guide, however, we will only consider the current requirements. New User Guide \u00b6 This section of this guide is for new users to servers and the CLI interface. Step 1 - Get a Server \u00b6 Righto! Let\u2019s get started. Choosing where to set up a Service Node is the biggest choice you will make when running a Service Node. There are a number of things to consider. Because you will be locking up funds for 30 days (2 days for testnet) at a time, you will want to ensure that your server has: A stable, relatively fast connection to be able to respond to ping requests to avoid being booted off the network We recommend 2GB of RAM to cope with running the software reliably ( Note: This requirement may be much greater once services are live ). 1GB is fine for testing. At Least a 20GB SSD or Hard disk drive, this will be used to store the blockchain ( Note: to future proof yourself against blockchain growth and message storage we recommend a 30 - 40 GB drive ) A stable power supply. If your server goes down during the staking period, you may get kicked off the network, and not receive rewards while your funds are still locked for the remainder of the staking period. For most users, we assume that your home internet connection is relatively slow (< 4MB/s down and up) and probably lacks support for external connections. If this is the case, you will probably not want to run a Service Node from your home in the long term, as this could cost you if and when you get booted off. Since we\u2019re just testing at the moment, you could run it from home anyway, but for this guide we\u2019ll avoid it. Typically, the easiest and cheapest way to host a server outside of your home is to use a Virtual Private Server (VPS). There are thousands of options when it comes to VPS providers, but for now, just about any one will do. In the future, selection will be made more difficult because most providers will not allow exit node traffic, so we have compiled a list of exit node friendly providers to choose from if you want to stay with your provider for more than a few months. Hosting Provider Product Name Cost Per Month $USD Bandwidth Provided Exit Friendliness Rating Netcup VPS 1000 G8 10.50 30 - 35 MiB\u2019s 5 / 10 Online.net Start-2-S-SSD 13.99 15 - 17 MiB\u2019s 9 / 10 Scaleway START1-M 9.33 20 - 25 MiB\u2019s 7 / 10 OVH VPS SSD 2 7.61 10 - 15 MiB\u2019s 9 / 10 Leaseweb Virtual Server XL 34.45 30 - 35 MiB\u2019s 5 / 10 Digital Ocean 2 GB, 2 vCPUs 15 9 - 11 MiB\u2019s 8 / 10 Feral Hosting Neon Capability 19.68 9 - 11 MiB\u2019s 9 / 10 Trabia VDS-8G 38.54 9 - 11 MiB\u2019s 8 / 10 Hetzner EX41-SSD (30 TB) 39.71 80 - 40 MiB\u2019s 4 / 10 Try not to pick the first one off the list. Do some digging and see which one looks the best to you, what your budget is, and what the latency is like for you based on the server location that you choose. When selecting your VPS\u2019 operating system, choose Ubuntu 16.04 64 bit or Ubuntu 18.04 64 bit if you want to follow this guide. If you feel more confident or wish to run your server on another distribution or operating system, the Loki commands in this guide will still apply. Step 2 - Prepare your Server \u00b6 Every provider has a slightly different way of issuing you access to your new VPS. Most will send an email with the IP address, root username, and a root password of the VPS. To access your server, you will need a SSH client for your operating system. Because we\u2019re on Windows today, we\u2019ll download PuTTY, Mac users can also use PuTTY. If you\u2019re a Linux user, you probably don\u2019t want us telling you where to get a SSH client from. To connect to our VPS we will need to paste the IP address into the SSH client\u2019s \u201cHost Name (or IP address)\u201d input box and click the \u201cOpen\u201d button. The Port number can usually just be left as 22 . A terminal window will now appear prompting for your log-in details, username(root) and password, which were provided by your VPS provider. When entering your password, nothing will visually appear in the terminal. This is normal. Hit enter when it\u2019s typed or pasted, and you should be logged in to your VPS. Hot Tips for using the Console \u00b6 Consoles don't work like the rest of your computer. Here are some basic tips for navigating your way around the command line! Don't try copying something by using the usual Ctrl + C hotkey! If you want to copy something, do so by highlighting text and then right clicking it. Pasting works by right clicking a blank area in the console. If you want to kill a process or stop something from running, press Ctrl + C. This is why you shouldn't try copying something with this hotkey ;) You can always check the directory you are in and its contents by typing ls You can always return to your home directory by typing cd ~ You can move into a given directory by typing cd <name> or move back up one level by typing cd .. PuTTY allows you to easily duplicate or restart a session by right clicking the top of the window. Handy if you\u2019re trying to do a few things at once. Once we have logged in correctly to the VPS for the first time, the terminal may prompt us for a new password for our root account. The terminal will require you to enter the new password twice before we can start running commands. Optional - Set up Non-root User \u00b6 Best practice when running a public server is to not run your software as the root user. Although it is optional, we will create a non-root user to our VPS by running the following command. sudo adduser <username> Replacing <username> with a name you will log-in with. For this user-guide we will use snode as our username. sudo adduser snode The terminal will prompt you for a new password for our newly created user. Use a different password to the root password. Once the password has been set, the terminal will prompt for a few details about the individual running the user. You can hit enter through each of the inputs as the details are not important for the purposes of running a Service Node. Once that\u2019s done, run the following two commands to give our new account admin privileges and to change to such account. sudo usermod -aG sudo snode su - snode Before we proceed further, it is advised to close your terminal and reopen PuTTY to set up a saved session with our snode user. Your SSH client will have a load and save session function. For PuTTY we will need to type in our VPS IP address again, on the same screen type snode under \u201cSaved Session\u201d. Click on \u201cData\u201d under the drop-down menu \u201cConnection\u201d, and type in snode (or your username defined before) into the input box \u201cAuto-login username\u201d. Go back to your session screen, where we entered the IP address, and click \u201cSave\u201d. You can load this session whenever you want to check on your Service Node. Server Preparation Continued \u00b6 We should update our package lists, the below command downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their dependencies. It will do this for all repositories and PPAs. sudo apt-get update You will notice a bunch of package lists were downloaded, once this is complete run the below command to fetch new versions of any packages we currently have installed on the system. sudo apt-get upgrade You will be prompted to authorise the use of disk space, type y and enter to authorise. If you are prompted at any time that a version of any file is available then click the up and down arrows until you are hovering over install the package maintainer\u2019s version and click enter. Alright, good to go. Our server is now set up, up to date, and is not running in root. On to the fun part! Step 3 - Download the Loki Binaries \u00b6 First download the Linux binaries by running the following command: wget <link> Where <link> is the download link of the latest linux release. To find the link go to https://github.com/loki-project/loki/releases/latest , right click the latest linux release and click Copy Link Location . Your command should look something like: wget https://github.com/loki-project/loki/releases/download/1.0.3/loki-linux-x64-1.0.3.zip If wget is not installed you may need to run sudo apt-get install wget To get to the binaries, we need to unzip them. Download and install unzip by running the following command. sudo apt-get install unzip If unzip is not installed you may need to run sudo apt-get install unzip To unzip the downloaded zip file run the following command: unzip loki-linux-x64-1.0.3.zip You should see 8 files unzipped: loki-blockchain-export loki-wallet-cli loki-blockchain-usage lokid loki-blockchain-blackball loki-wallet-rpc loki-blockchain-import Loki-gen-trusted-multisig Check they are unzipped by running: ls If not, sometimes unzip will dump the binaries in a folder. In our case the folder would be called loki-linux-x64-1.0.3 , so to get into it we can type: cd loki-linux-x64-1.0.3 To check that they are in that folder, once again, type: ls Excellent! We now have all of the necessary files to get this show on the road! NOTE: If you\u2019re nervous about trusting the binaries or the link, you should build it from source yourself. Instructions for that can be found in the README of https://github.com/loki-project/loki Step 4 - Run the Service Node Daemon \u00b6 Let\u2019s start up the daemon so we can sync the blockchain and register our Service Node. The problem with the terminal we currently have open is that once we close PuTTY the program running inside it will also shut down. We can run a program called screen which can keep our Service Node running for 30 days without having to look at it all the time. The screen command is generally included in Ubuntu by default. If it isn\u2019t, run sudo apt install screen . Running it opens up a terminal shell inside your session that will continue to run in the background once you detach it from the session. Type the following command: screen Enter through the information that the terminal shell is providing until we get back a blank screen awaiting an input. To begin the Service Node daemon we must launch lokid with the flag --service-node . ./lokid --service-node If you are testing the daemon on testnet run the following command ./lokid --service-node --testnet The daemon will now start syncing. You won\u2019t be able to do much if it hasn\u2019t synced. To have the daemon to continue to run in the background hold Ctrl and type ad. To test your screen is still running in the background run the command screen -ls and take note of the port number at the start of the screen. This number will help us re-enter the daemon at future times. Typing screen -x <port number> will reattach the session so we can see what\u2019s going on inside. Hold CTRL and type \"ad\" again to detach the screen once more. For now, we can just leave the session open to see the daemon messages while we set up the Service Node. Just don't forget to use CTRL + A + D to detach the session before you close PuTTY later on. Step 5 - Get/Open A Wallet \u00b6 While we wait for the daemon to sync, we can now get a wallet going. You do not have to run this wallet on the server and you should not! Download the software and run it from elsewhere for security reasons! You can run the CLI wallet (Command Line Interface wallet) on any other computer, including your home computer to avoid leaving your wallet on the server. However, if you do want to run the CLI wallet on another computer, you will either need to run another daemon on that local machine or use a remote node (uk.loki.cash:22020, for example). There is also a list of trusted remote nodes in the Loki Project Discord channel under #links-and-resources. Alternatively if your Service Node is synced up, you could actually use the address of that daemon. When you run 'loki-wallet-cli' locally and wish to use a remote daemon, use the syntax: ./loki-wallet-cli --daemon-address <insert address here> Or on windows: loki-wallet-cli.exe --daemon-address <insert address here> If you are made of money and are willing to take the small risk of losing all of your funds, you can continue running the wallet inside the Service Node VPS. So we don't have to talk about a myriad of other operating systems or potential user cases, the rest of this guide will assume you are running the wallet in the same VPS. As such, it\u2019ll probably save us time to open a second PuTTY session. You can do this by right clicking the window of the current PuTTY session and clicking \u201cDuplicate Session.\u201d Log in to your non-root user that we set up before, in our case snode, and once in we should open a new screen by typing screen and hitting return twice. Change directory to where our binaries are saved: cd loki-linux-x64-1.0.3 Then to launch the wallet run the command: ./loki-wallet-cli If you are on testnet run the command with the --testnet flag: ./loki-wallet-cli --testnet When loki-wallet-cli first runs, it will request for you to specify a wallet name. Assuming we haven't created one yet, we will use the e.g. name MyWallet Because this is the first time we have used the name MyWallet the client will prompt us to create a new wallet. Type y and click return to continue. The loki-wallet-cli has generated us a wallet called MyWallet and is now prompting us for a password. Note: - When typing the password, the characters will not appear. It will seem as if you are typing and no text is appearing however the terminal is logging every character you type including if it is capitalised or lowercase. - Write down your wallet name and password on a piece of paper as this information will be required every time we want to enter our wallet. - Use a password with uppercase letters, lowercase letters, numbers, symbols and make the password at least 9 characters long. Once we have chosen our password for the wallet we must choose our language. For the purposes of this user guide I suggest you use English by typing in 1 and clicking return. The CLI will generate and spit out several lines of text. The first two lines of text show your wallet public address. This address can be shared, will be used to receive Loki to your wallet, and will be used during the preparation and registration of our Service Node. All Mainnet Loki public addresses start with an L and are followed with a string of characters, Testnet Public addresses start with a T. The public address shown will be your primary address, however multiple public addresses can be generated from this primary address. Line 13 to 17 show your 25-word mnemonic (\u201cnew-monic\u201d) seed. The seed is used to easily backup and restore your wallet without needing any other information. At this stage, grab a pen and paper, and write down your 25 words in order. Store the piece of paper in a safe and secure place, if your words are stored in a text file on your computer or stored online, you increase your risk of someone else getting control of your wallet. It is at this point that we should get some Loki in the wallet. The amount of Loki required to run a node is derived from the function shown in Lokis Cryptoeconomic paper . Don't worry if you cant work out the formula, you can use this community created tool or, the daemon will display the amount of Loki required to run the node. If you do not have enough you will have the option to join in or run your own Service Node pool. If you are running a Service Node on the testnet you will only ever require 100 testnet Loki to run the Node. You can ask someone in the Loki Discord Community for some testnet Loki, or alternatively you can run the command start_mining in your wallet. This may take an hour or two to get enough Loki. If you are staking please do not use Subaddresses. They are currently unsupported by the Loki wallet We will need our address to register our Service Node later, to get your primary address type the following command: address Highlight the string of characters that were outputted and save this in a notepad for later use, your public address should look similar to: LPoiZQ43qG18FzKq7WhEbk3gfNNiemGsd7REdSQaFv4RdB8E97RxP8WFLRR2xHQStiSM61EFEicXU3EEPj7GEHdz8WHUrWRkbGeQ1r8ro8 NOTE: Do not use CTRL + C to copy your address, it will close the wallet down. Simply highlight the address and this will automatically save the portion you highlighted into your clipboard. Once you have enough Loki in this wallet, just leave it open, we\u2019ll come back to it in a minute. Step 6 - Service Node Registration \u00b6 The next part of the guide will split into two sections: If you are an individual staker and do not require any other contributors to run your Service Node jump into 6.1 - individual Staking . If you want to run a pooled Service Node or contribute towards a pool jump into 6.2 - Pool Staking 6.1 - Individual Staking \u00b6 If you want to run the Service Node as an individual you will require the following things. A Loki daemon running with --service-node flag (see step 4). A loki-wallet-cli primary address with enough Loki in your account to meet the Service Node Staking Requirement (see step 5). Now if we have the two above items we can proceed to our daemon to register our Service Node. Type screen -ls to get a list of the screens running. Your daemon will normally be the bottom one on the list. To enter our daemon run the following command, replacing <port number> with the number that corresponds with your daemon. screen -x <port number> To start the registration process we are going to run the following interactive command within the daemon terminal: prepare_registration The daemon will output the current staking requirement and prompt you with an input to clarify if you are an individual staker or you will be running a pool. Type y and click enter as we will be the sole staker. The daemon will now prompt us for the Loki address of the operator. If you followed step 5 you should have this address saved in a notepad, if not run through step 5 again to find your Loki Address. Once we have the Loki Address copied to our clipboard we can then right click the terminal screen to paste the address. Double check the address matches the one of your wallet then click enter if it is the same. The daemon will now ask if you wish to enable automatic re-staking. Type y and click enter if you would like to have your Service Node re-stake automatically for you at the end of every 30 days. Type n if you would like to re-stake manually. The daemon will now ask for a final confirmation, if you agree to the information provided type y and click enter. The daemon will output a command for us to run looking similar to: register_service_node 4294967292 T6TCCyDgjjbddtzwNGryRJ5HntgGYvqZTagBb2mtHhn7WWz7i5JDeqhFiHqu7ret56411ZJS7Thfeis718bVteBZ2UA6Y7G2d 4294967292 100.000000000 1535677391 ec3895ea70a4a91b5ec4b5e1df96a45e07046f1fb0123c754d98fb2d70f4529d 5bb35d7b8ab1acb943bc47913ada8f9d2e6d6e22264e57484a04c1bbfd461f0ee2e5435454cd9b7059b221eb506ce9ea4537ddd9faf1f1757e0ef611a41c0609 Copy the whole line of text and paste it into your notepad as we will need to run this command in our loki-wallet-cli . if registering multiple nodes, please wait at least 10 blocks between Service Nodes before running the register Service Node command in the wallet You have 2 weeks from the moment of registering the Service Node to run the register_service_node command, however it is advised to do it as soon as possible. We do not require our daemon terminal anymore, however we do need to daemon to be running. Hold CTRL and type ad to detach the screen. Run through step 5 once more to open our Loki wallet. Once we are in our wallet run the command the daemon outputted for us when we prepared our Service Node. Alternatively, you can also include the auto command, this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. register_service_node auto args..... If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop the auto command. The wallet will prompt us to confirm our password, then the amount of Loki to stake. Confirm this by typing y and clicking enter. Well done! Let's continue to the next step \"Step 7 - Service Node Check\" to check if our Service Node is running. 6.2 - Pool Staking \u00b6 Service Nodes can be split between multiple parties. At a minimum, the operator must stake at least 25% of the total required amount. The operator can also reserve contribution slots for specific addresses to prevent random users from adding to the pool. In any given pool, there will be at most 4 contributors including the operator. After the operator, each new participant must also contribute 25% of the minimum, except the last one. So for example, valid splits might be: Operator Contributor 1 Contributor 2 Contributor 3 25% 25% 40% 10% 65% 25% 10% 90% 10% 99% 1% Depending on the individual and their circumstance they will need to: Jump into section \"6.2.1 - Operator\" if they are running the daemon and hosting the pool; Jump into section \"6.2.2 - Pool Contributor\" if they are contributing to someone's Service Node. NOTE: It is advised to read both sections of \"6.2 - Pool Staking\" to have a better understanding of the process. 6.2.1 - Operator \u00b6 The Operator is the individual who will be hosting the pool and running the Service Node daemon, thus incurring the operating expenses encompassed by running a node. The Operator will need to have: A Loki daemon running with --service-node flag (see step 4) at all times. A loki-wallet-cli primary address with enough Loki in their account to meet 25% of the Staking Requirement. 1-3 other contributors who also have a loki-wallet-cli with enough Loki in their accounts to meet 25% of the staking requirement. The address and contribution amounts the 1-3 contributors will stake. NOTE: The other contributors addresses are optional to have as you can create your pool to be open to anyone to contribute to, however they are recommended to have to avoid any issues of other individuals stealing their spots. Now if we have the three/four above items we can proceed to our daemon to register our Service Node. Type screen -ls to get a list of the screens running. Your daemon will normally be the bottom one on the list. To enter our daemon run the following command, replacing <port number> with the number that corresponds with your daemon: screen -x <port number> To start the registration process we are going to run the following interactive command within the daemon terminal: prepare_registration The terminal will prompt the operator to specify if they will contribute the entire stake, because we are running this as a pooled Service Node we will type n and click enter. Next the terminal will request the input for the operator cut. This value is between 0-100 and represents the percentage of the reward the operator will receive before the reward is distributor to the share holders. If you have agreed to a 10% operator cut with the other contributors you would type 10 and click return. The terminal will now display the minimum reserve the operator can contribute and request the operator to input the amount in Loki they wish to contribute. Type your desired <operator contribution> and click return. Once we have set the operators desired stake amount we have the option to either leave the pool open for anyone to contribute or lock a reserve for individuals that have agreed with us to stake within our Service Node. Reserved Pool \u00b6 If the operator wishes to have their pool closed they should type y and click continue. The terminal will now prompt the operator for the number of additional contributors they have organised to be apart of this Service Node. They must type in the number of contributors, not including themselves, and click return. The daemon will now prompt us for the Loki address of the operator. If you followed step 5 you should have this address saved in a notepad, if not run through step 5 again to find your address. Once we have the Loki Address copied to our clipboard we can then right click the terminal screen to paste the address then click return to confirm your address. Next the operator must input each of the contributors amount of Loki they will stake and each contributors address. The daemon will now ask if you wish to enable automatic re-staking. Type y and hit return if you would like to have your Service Node re-stake automatically at the end of every 30 days. Type n if you would like to re-stake manually. You will now be asked to confirm the information above is correct. Open Pool \u00b6 If the operator wishes to leave their pool open they should type n and click continue. The terminal will prompt the operator to input their address. Once the address has been inputted the terminal will display the remaining portion that needs to be contributed by others. If you agree click y and hit return. The daemon will display a summary of the information we entered. This is our chance for a final check over to make sure we entered in the right information. If you confirm the information is correct type y and click return. The daemon will output a command for us to run within our wallet, looking similar to: register_service_node 214748364 T6UCEoWvJHCJq5biK3LMQZ4CRXAaqiPda2kCRRYYYEMFfxYoqnUo7Nx88RL3wmENwN4kfjDSp2jMN1g6PSErKrSu2EEp8UMy5 1073741823 T6TCCyDgjjbddtzwNGryRJ5HntgGYvqZTagBb2mtHhn7WWz7i5JDeqhFiHqu7ret56411ZJS7Thfeis718bVteBZ2UA6Y7G2d 3221225469 25.000000000 1535692249 5dac247e90ced2dcd9e51faec8792acb0c11b4c700640d9104b17c868ea167e3 cc11eef804c11d3e93cf8c488c10d97b8cec9ee2b38e6666ff07749c2911aa06ce310edc926a4d2f50a588e9c15afcc20e935a0f188aa7caa764a62058dec80d NOTE: You must run the command outputed in your daemon and not the command shown above. Copy the whole line of text in your daemon and paste it into your notepad as we will need to run this command in our loki-wallet-cli . You have 2 weeks from the moment of registering the Service Node to run the register_service_node command, however it is advised to do it as soon as possible. Before we leave the daemon run the following command to get our <Service Node Public Key> and save it in your notepad: print_sn_key Run through step 5 once more to open our Loki wallet. Once we are in our wallet run the command the daemon outputted for us when we prepared our Service Node. The wallet will prompt us to confirm our password, then the amount of Loki to stake. Confirm this by typing y and clicking enter. Alternatively, the operator can also include the auto command, when staking this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. register_service_node auto args..... If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop the auto command. We must now send the <Service Node Public Key> to our contributors with the amount of Loki they are required to stake. At this point the we will need to wait until all contributors have staked before rewards will be received. 6.2.2 - Pool Contributor \u00b6 The pool contributor must first receive the Service Node Pubkey and the requirements (amount of loki to send) from the Service Node Operator. If you are staking please do not use Subaddresses. They are currently unsupported by the Loki wallet The pool contributor must have downloaded the necessary binaries, is running a daemon or is connected to a remote node, has generated a wallet through the loki-wallet-cli , and has enough Loki to stake. They can then run the following command in their loki-wallet-cli . stake <Service Node Pubkey> <address> <contribution amount> Where the <Service Node Pubkey> is the Pubkey provided from the Service Node operator, the <address> the service node operator will likely reserve an address for which they want you to stake for, this will usually be the same address as the wallet you are planning to stake from, in the case of an open pool this will always be the address you will you stake from and you will also receive rewards here too. <contribution amount> is the amount of Loki they are going to stake which they agreed to with the Service Node Operator. The Pool Contributor can also include the auto command, when staking this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. stake auto <Service Node Pubkey> <address> <contribution amount> If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop autostaking. The auto command does not work with a multsig wallet as there is a requirement for the party who is staking to have the transaction signed by another signer. Thus is it advised if you are using a multisig wallet to maintain the staking once a month when the funds are unlocked. At this stage you will need to wait for the other contributors to provide their collateral. Once everyone has staked you can refer to \u201cStep 7 - Service Node Check\u201d to see where your Service Node Operator\u2019s node is in the list. Congratulations, you are now staking. Step 7 - Service Node Check \u00b6 After we have locked your collateral we will need to check if our Service Node Pubkey is sitting in the list with the other Service Node\u2019s on the network. This will prove our Service Node is running, recognised and will receive a reward if it keeps running. Let\u2019s go into our daemon screen by typing screen -x <port number> . To find the port number use screen -ls and your daemon should be sitting at the bottom of the list. Once we are in the daemon again we can run the following command to see our Service Node Public Key: print_sn_key The Service Node Public Key is used to identify our Service Node within the list of Service Nodes currently on the network. You can jump onto https://lokiblocks.com/ to see if your Service Node is in the list or we can continue in the terminal to output the same information. If you are running your Service Node on testnet go to https://lokitestnet.com/ instead. We will want to know the current block height, type status into the daemon and it will output this information. Once we have the block height we can then check the current Service Nodes on the network at our specified block height. Run the command print_quorum_state <block height> replacing <block height> with the number minus 1 that was outputted when running status command. If your <Service Node Pubkey> is sitting in the list you know you are now staking. Additional Functions \u00b6 Autostaking - Checking/stopping autostake command \u00b6 To check the processes running in the background, run the command: top -u <username> Under the COMMAND column we should see a process called loki-wallet-cli . If you do not see this process you are either looking at the wrong <username> or your autostake command is not running. If you want to stop the autostake then run the following command while logged on to the specific <username> which has loki-wallet-cli running in the background: pkill loki-wallet-cli ### Running Autostake on startup If the host machine your VPS is running on shuts down or restarts unexpectedly then so to will your your autostaking wallet, you can use the following command to start the autostaking wallet again, you can also include these commands in your startup scripts, ensuring if your node goes down it automatically restarts the wallet process. loki-wallet-cli --testnet --wallet-file <PATH TO WALLET FILE> --password <WALLET PASSWORD> set ask-password 0 register_service_node auto ... Running this command if you have already staked will not stake over the top of an already staked node Express Setup Guide \u00b6 This section is for power users who are more familiar with servers and the CLI interface. There's a couple of things your going to want to do before you commence. 1. Get a Server that meets requirements 2. Run the Daemon on a server from a non-root user account, then stake from a local wallet (or a wallet on a separate server). where <VERSION> is mentioned replace with the latest version , example 1.0.3 3. Connect via SSH to your server 4. add new user sudo adduser snode <enter> Y exit 5. login to your new user account via SSH snode@<ipaddress> 6. Update necessary security patches and system utilities sudo apt-get update sudo apt-get upgrade 7. Download & unzip Loki wget https://github.com/loki-project/loki/releases/download/v<VERSION>/loki-linux-x64-<VERSION>.zip sudo apt-get install unzip unzip loki-linux-x64-<VERSION>.zip 8. Run Loki in a screen and Detach Screen <enter> cd loki-linux-x64-<VERSION> ./lokid --service-node Ctrl +AD Wait for the Loki Daemon sync the blockchain (1 - 8 Hours depending on internet speed) 9. Open a Wallet This wallet can be in a screen on the Service Node machine, or a wallet on your local computer (assuming you have downloaded the binaries). cd loki-linux-x64-<VERSION> Linux/MAC - ./loki-wallet-cli Windows - loki-wallet-cli Enter Name: Name your wallet Enter password Language: 1 (for English) Securely store: 1. Address 2. Seed Phrase 3. Pass-phrase Send enough Loki to fund a node, wait for Balance to be unlocked (20 mins, 10 confirmations) 10. Register your Service Node On your Service Node reattach to the screen which has the Service Node running. screen -r prepare_registration Contribute entire Stake: Y/N Enter Loki Address Enable Restaking: Y/N Confirm: Y Copy green registration message Ctrl +AD 11. Reattach to Service Node or local wallet Paste in registration message <enter> 12 Attach Back to Service Node Daemon screen -r print_sn_key Copy service node key, and search for it on: https://lokiblocks.com/service_nodes CTRL +AD ctrl +ad detaches screen and runs your Loki Service Node in background this is critical Conclusion \u00b6 Well done! You will receive a block reward when your Service Node has been active for some time and the network chooses you within the list. Bonus Add the community-run telegram bot @lokiSNBot to receive on-the-fly updates about your service node. Props to @jagerman42 for building this. Bonus 2 View jagerman.com/sn/ for more details on Loki Service Node staking requirements. This guide will be regularly updated when new features are added to Snodes. Join the discord for more discussion. If you can improve this guide, please submit a pull request.","title":"Service Node Full Guide"},{"location":"Wallets/CliWallet/SNFullGuide/#full-guide-on-service-nodes","text":"This document will tell you exactly how to set up and operate a Service Node for the Loki Project. This document was written with non-developers in mind, so people new to linux or command line operations should be able to follow along without any trouble. Also available is a video guide, which provides a more simplified version of the written guide, it can be viewed here If you feel confident around servers and the CLI, then skip to the Express Setup Guide You can of course run the Loki software on any operating system that you can get it to build on, but for the purposes of this document, the instructions apply to running a Service Node on a remote Ubuntu 16.04 server. If that isn\u2019t what you want to do, syntax and server set up will of course differ according to whatever OS you choose to run your Service Node from.","title":"Full Guide on Service Nodes"},{"location":"Wallets/CliWallet/SNFullGuide/#summary-of-loki-service-node-requirements","text":"Full summary of Loki Service Node Requirements. This may change depending on Service Node functionality, so you should check here regularly, or follow our telegram/discord announcements channel. Spec Note Latest Binary loki-linux-x64-1.0.3 Software Ubuntu 16.04 Memory 30-50gb Ram 2-4 gb","title":"Summary of Loki Service Node Requirements"},{"location":"Wallets/CliWallet/SNFullGuide/#table-of-contents","text":"Overview of Service Nodes New User Guide Step 1 Server Step 2 Server Prep Step 3 Download Binaries Step 4 Run the Loki Daemon Step 5 Open a Loki Wallet Step 6 Register Node Step 7 Check Registration Express Setup Guide Additional Functions","title":"Table of Contents"},{"location":"Wallets/CliWallet/SNFullGuide/#overview","text":"To understand what a Service Node is, you can refer to the whitepaper to get an in depth understanding. For now, all you need to know is that: Service Nodes are full nodes on the Loki network Full nodes become Service Nodes when the owner locks the required amount of Loki for 30 days (2 days on testnet) and submits a registration transaction Once accepted by the network, the Service Node is eligible to win block rewards Multiple participants can be involved in one Service Node and can have the reward automatically distributed It is also worth noting that Service Nodes are quite basic at the moment, and operators will need to stay up to date with new updates to keep in line with software and hardware requirements. Once all of the updates are out, Service Nodes will also: Route end user\u2019s internet traffic, either as an exit node or relay in a novel mixnet Receive, store and forward encrypted user messages Monitor other Service Nodes and vote on their performance Be called into quorums which give them authority over instant transactions (Blink) Act as remote nodes for users Once these features come out, Service Node operation will require better servers, particularly when it comes to bandwidth. For the purposes of this guide, however, we will only consider the current requirements.","title":"Overview"},{"location":"Wallets/CliWallet/SNFullGuide/#new-user-guide","text":"This section of this guide is for new users to servers and the CLI interface.","title":"New User Guide"},{"location":"Wallets/CliWallet/SNFullGuide/#step-1-get-a-server","text":"Righto! Let\u2019s get started. Choosing where to set up a Service Node is the biggest choice you will make when running a Service Node. There are a number of things to consider. Because you will be locking up funds for 30 days (2 days for testnet) at a time, you will want to ensure that your server has: A stable, relatively fast connection to be able to respond to ping requests to avoid being booted off the network We recommend 2GB of RAM to cope with running the software reliably ( Note: This requirement may be much greater once services are live ). 1GB is fine for testing. At Least a 20GB SSD or Hard disk drive, this will be used to store the blockchain ( Note: to future proof yourself against blockchain growth and message storage we recommend a 30 - 40 GB drive ) A stable power supply. If your server goes down during the staking period, you may get kicked off the network, and not receive rewards while your funds are still locked for the remainder of the staking period. For most users, we assume that your home internet connection is relatively slow (< 4MB/s down and up) and probably lacks support for external connections. If this is the case, you will probably not want to run a Service Node from your home in the long term, as this could cost you if and when you get booted off. Since we\u2019re just testing at the moment, you could run it from home anyway, but for this guide we\u2019ll avoid it. Typically, the easiest and cheapest way to host a server outside of your home is to use a Virtual Private Server (VPS). There are thousands of options when it comes to VPS providers, but for now, just about any one will do. In the future, selection will be made more difficult because most providers will not allow exit node traffic, so we have compiled a list of exit node friendly providers to choose from if you want to stay with your provider for more than a few months. Hosting Provider Product Name Cost Per Month $USD Bandwidth Provided Exit Friendliness Rating Netcup VPS 1000 G8 10.50 30 - 35 MiB\u2019s 5 / 10 Online.net Start-2-S-SSD 13.99 15 - 17 MiB\u2019s 9 / 10 Scaleway START1-M 9.33 20 - 25 MiB\u2019s 7 / 10 OVH VPS SSD 2 7.61 10 - 15 MiB\u2019s 9 / 10 Leaseweb Virtual Server XL 34.45 30 - 35 MiB\u2019s 5 / 10 Digital Ocean 2 GB, 2 vCPUs 15 9 - 11 MiB\u2019s 8 / 10 Feral Hosting Neon Capability 19.68 9 - 11 MiB\u2019s 9 / 10 Trabia VDS-8G 38.54 9 - 11 MiB\u2019s 8 / 10 Hetzner EX41-SSD (30 TB) 39.71 80 - 40 MiB\u2019s 4 / 10 Try not to pick the first one off the list. Do some digging and see which one looks the best to you, what your budget is, and what the latency is like for you based on the server location that you choose. When selecting your VPS\u2019 operating system, choose Ubuntu 16.04 64 bit or Ubuntu 18.04 64 bit if you want to follow this guide. If you feel more confident or wish to run your server on another distribution or operating system, the Loki commands in this guide will still apply.","title":"Step 1 - Get a Server"},{"location":"Wallets/CliWallet/SNFullGuide/#step-2-prepare-your-server","text":"Every provider has a slightly different way of issuing you access to your new VPS. Most will send an email with the IP address, root username, and a root password of the VPS. To access your server, you will need a SSH client for your operating system. Because we\u2019re on Windows today, we\u2019ll download PuTTY, Mac users can also use PuTTY. If you\u2019re a Linux user, you probably don\u2019t want us telling you where to get a SSH client from. To connect to our VPS we will need to paste the IP address into the SSH client\u2019s \u201cHost Name (or IP address)\u201d input box and click the \u201cOpen\u201d button. The Port number can usually just be left as 22 . A terminal window will now appear prompting for your log-in details, username(root) and password, which were provided by your VPS provider. When entering your password, nothing will visually appear in the terminal. This is normal. Hit enter when it\u2019s typed or pasted, and you should be logged in to your VPS.","title":"Step 2 - Prepare your Server"},{"location":"Wallets/CliWallet/SNFullGuide/#hot-tips-for-using-the-console","text":"Consoles don't work like the rest of your computer. Here are some basic tips for navigating your way around the command line! Don't try copying something by using the usual Ctrl + C hotkey! If you want to copy something, do so by highlighting text and then right clicking it. Pasting works by right clicking a blank area in the console. If you want to kill a process or stop something from running, press Ctrl + C. This is why you shouldn't try copying something with this hotkey ;) You can always check the directory you are in and its contents by typing ls You can always return to your home directory by typing cd ~ You can move into a given directory by typing cd <name> or move back up one level by typing cd .. PuTTY allows you to easily duplicate or restart a session by right clicking the top of the window. Handy if you\u2019re trying to do a few things at once. Once we have logged in correctly to the VPS for the first time, the terminal may prompt us for a new password for our root account. The terminal will require you to enter the new password twice before we can start running commands.","title":"Hot Tips for using the Console"},{"location":"Wallets/CliWallet/SNFullGuide/#optional-set-up-non-root-user","text":"Best practice when running a public server is to not run your software as the root user. Although it is optional, we will create a non-root user to our VPS by running the following command. sudo adduser <username> Replacing <username> with a name you will log-in with. For this user-guide we will use snode as our username. sudo adduser snode The terminal will prompt you for a new password for our newly created user. Use a different password to the root password. Once the password has been set, the terminal will prompt for a few details about the individual running the user. You can hit enter through each of the inputs as the details are not important for the purposes of running a Service Node. Once that\u2019s done, run the following two commands to give our new account admin privileges and to change to such account. sudo usermod -aG sudo snode su - snode Before we proceed further, it is advised to close your terminal and reopen PuTTY to set up a saved session with our snode user. Your SSH client will have a load and save session function. For PuTTY we will need to type in our VPS IP address again, on the same screen type snode under \u201cSaved Session\u201d. Click on \u201cData\u201d under the drop-down menu \u201cConnection\u201d, and type in snode (or your username defined before) into the input box \u201cAuto-login username\u201d. Go back to your session screen, where we entered the IP address, and click \u201cSave\u201d. You can load this session whenever you want to check on your Service Node.","title":"Optional - Set up Non-root User"},{"location":"Wallets/CliWallet/SNFullGuide/#server-preparation-continued","text":"We should update our package lists, the below command downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their dependencies. It will do this for all repositories and PPAs. sudo apt-get update You will notice a bunch of package lists were downloaded, once this is complete run the below command to fetch new versions of any packages we currently have installed on the system. sudo apt-get upgrade You will be prompted to authorise the use of disk space, type y and enter to authorise. If you are prompted at any time that a version of any file is available then click the up and down arrows until you are hovering over install the package maintainer\u2019s version and click enter. Alright, good to go. Our server is now set up, up to date, and is not running in root. On to the fun part!","title":"Server Preparation Continued"},{"location":"Wallets/CliWallet/SNFullGuide/#step-3-download-the-loki-binaries","text":"First download the Linux binaries by running the following command: wget <link> Where <link> is the download link of the latest linux release. To find the link go to https://github.com/loki-project/loki/releases/latest , right click the latest linux release and click Copy Link Location . Your command should look something like: wget https://github.com/loki-project/loki/releases/download/1.0.3/loki-linux-x64-1.0.3.zip If wget is not installed you may need to run sudo apt-get install wget To get to the binaries, we need to unzip them. Download and install unzip by running the following command. sudo apt-get install unzip If unzip is not installed you may need to run sudo apt-get install unzip To unzip the downloaded zip file run the following command: unzip loki-linux-x64-1.0.3.zip You should see 8 files unzipped: loki-blockchain-export loki-wallet-cli loki-blockchain-usage lokid loki-blockchain-blackball loki-wallet-rpc loki-blockchain-import Loki-gen-trusted-multisig Check they are unzipped by running: ls If not, sometimes unzip will dump the binaries in a folder. In our case the folder would be called loki-linux-x64-1.0.3 , so to get into it we can type: cd loki-linux-x64-1.0.3 To check that they are in that folder, once again, type: ls Excellent! We now have all of the necessary files to get this show on the road! NOTE: If you\u2019re nervous about trusting the binaries or the link, you should build it from source yourself. Instructions for that can be found in the README of https://github.com/loki-project/loki","title":"Step 3 - Download the Loki Binaries"},{"location":"Wallets/CliWallet/SNFullGuide/#step-4-run-the-service-node-daemon","text":"Let\u2019s start up the daemon so we can sync the blockchain and register our Service Node. The problem with the terminal we currently have open is that once we close PuTTY the program running inside it will also shut down. We can run a program called screen which can keep our Service Node running for 30 days without having to look at it all the time. The screen command is generally included in Ubuntu by default. If it isn\u2019t, run sudo apt install screen . Running it opens up a terminal shell inside your session that will continue to run in the background once you detach it from the session. Type the following command: screen Enter through the information that the terminal shell is providing until we get back a blank screen awaiting an input. To begin the Service Node daemon we must launch lokid with the flag --service-node . ./lokid --service-node If you are testing the daemon on testnet run the following command ./lokid --service-node --testnet The daemon will now start syncing. You won\u2019t be able to do much if it hasn\u2019t synced. To have the daemon to continue to run in the background hold Ctrl and type ad. To test your screen is still running in the background run the command screen -ls and take note of the port number at the start of the screen. This number will help us re-enter the daemon at future times. Typing screen -x <port number> will reattach the session so we can see what\u2019s going on inside. Hold CTRL and type \"ad\" again to detach the screen once more. For now, we can just leave the session open to see the daemon messages while we set up the Service Node. Just don't forget to use CTRL + A + D to detach the session before you close PuTTY later on.","title":"Step 4 - Run the Service Node Daemon"},{"location":"Wallets/CliWallet/SNFullGuide/#step-5-getopen-a-wallet","text":"While we wait for the daemon to sync, we can now get a wallet going. You do not have to run this wallet on the server and you should not! Download the software and run it from elsewhere for security reasons! You can run the CLI wallet (Command Line Interface wallet) on any other computer, including your home computer to avoid leaving your wallet on the server. However, if you do want to run the CLI wallet on another computer, you will either need to run another daemon on that local machine or use a remote node (uk.loki.cash:22020, for example). There is also a list of trusted remote nodes in the Loki Project Discord channel under #links-and-resources. Alternatively if your Service Node is synced up, you could actually use the address of that daemon. When you run 'loki-wallet-cli' locally and wish to use a remote daemon, use the syntax: ./loki-wallet-cli --daemon-address <insert address here> Or on windows: loki-wallet-cli.exe --daemon-address <insert address here> If you are made of money and are willing to take the small risk of losing all of your funds, you can continue running the wallet inside the Service Node VPS. So we don't have to talk about a myriad of other operating systems or potential user cases, the rest of this guide will assume you are running the wallet in the same VPS. As such, it\u2019ll probably save us time to open a second PuTTY session. You can do this by right clicking the window of the current PuTTY session and clicking \u201cDuplicate Session.\u201d Log in to your non-root user that we set up before, in our case snode, and once in we should open a new screen by typing screen and hitting return twice. Change directory to where our binaries are saved: cd loki-linux-x64-1.0.3 Then to launch the wallet run the command: ./loki-wallet-cli If you are on testnet run the command with the --testnet flag: ./loki-wallet-cli --testnet When loki-wallet-cli first runs, it will request for you to specify a wallet name. Assuming we haven't created one yet, we will use the e.g. name MyWallet Because this is the first time we have used the name MyWallet the client will prompt us to create a new wallet. Type y and click return to continue. The loki-wallet-cli has generated us a wallet called MyWallet and is now prompting us for a password. Note: - When typing the password, the characters will not appear. It will seem as if you are typing and no text is appearing however the terminal is logging every character you type including if it is capitalised or lowercase. - Write down your wallet name and password on a piece of paper as this information will be required every time we want to enter our wallet. - Use a password with uppercase letters, lowercase letters, numbers, symbols and make the password at least 9 characters long. Once we have chosen our password for the wallet we must choose our language. For the purposes of this user guide I suggest you use English by typing in 1 and clicking return. The CLI will generate and spit out several lines of text. The first two lines of text show your wallet public address. This address can be shared, will be used to receive Loki to your wallet, and will be used during the preparation and registration of our Service Node. All Mainnet Loki public addresses start with an L and are followed with a string of characters, Testnet Public addresses start with a T. The public address shown will be your primary address, however multiple public addresses can be generated from this primary address. Line 13 to 17 show your 25-word mnemonic (\u201cnew-monic\u201d) seed. The seed is used to easily backup and restore your wallet without needing any other information. At this stage, grab a pen and paper, and write down your 25 words in order. Store the piece of paper in a safe and secure place, if your words are stored in a text file on your computer or stored online, you increase your risk of someone else getting control of your wallet. It is at this point that we should get some Loki in the wallet. The amount of Loki required to run a node is derived from the function shown in Lokis Cryptoeconomic paper . Don't worry if you cant work out the formula, you can use this community created tool or, the daemon will display the amount of Loki required to run the node. If you do not have enough you will have the option to join in or run your own Service Node pool. If you are running a Service Node on the testnet you will only ever require 100 testnet Loki to run the Node. You can ask someone in the Loki Discord Community for some testnet Loki, or alternatively you can run the command start_mining in your wallet. This may take an hour or two to get enough Loki. If you are staking please do not use Subaddresses. They are currently unsupported by the Loki wallet We will need our address to register our Service Node later, to get your primary address type the following command: address Highlight the string of characters that were outputted and save this in a notepad for later use, your public address should look similar to: LPoiZQ43qG18FzKq7WhEbk3gfNNiemGsd7REdSQaFv4RdB8E97RxP8WFLRR2xHQStiSM61EFEicXU3EEPj7GEHdz8WHUrWRkbGeQ1r8ro8 NOTE: Do not use CTRL + C to copy your address, it will close the wallet down. Simply highlight the address and this will automatically save the portion you highlighted into your clipboard. Once you have enough Loki in this wallet, just leave it open, we\u2019ll come back to it in a minute.","title":"Step 5 - Get/Open A Wallet"},{"location":"Wallets/CliWallet/SNFullGuide/#step-6-service-node-registration","text":"The next part of the guide will split into two sections: If you are an individual staker and do not require any other contributors to run your Service Node jump into 6.1 - individual Staking . If you want to run a pooled Service Node or contribute towards a pool jump into 6.2 - Pool Staking","title":"Step 6 - Service Node Registration"},{"location":"Wallets/CliWallet/SNFullGuide/#61-individual-staking","text":"If you want to run the Service Node as an individual you will require the following things. A Loki daemon running with --service-node flag (see step 4). A loki-wallet-cli primary address with enough Loki in your account to meet the Service Node Staking Requirement (see step 5). Now if we have the two above items we can proceed to our daemon to register our Service Node. Type screen -ls to get a list of the screens running. Your daemon will normally be the bottom one on the list. To enter our daemon run the following command, replacing <port number> with the number that corresponds with your daemon. screen -x <port number> To start the registration process we are going to run the following interactive command within the daemon terminal: prepare_registration The daemon will output the current staking requirement and prompt you with an input to clarify if you are an individual staker or you will be running a pool. Type y and click enter as we will be the sole staker. The daemon will now prompt us for the Loki address of the operator. If you followed step 5 you should have this address saved in a notepad, if not run through step 5 again to find your Loki Address. Once we have the Loki Address copied to our clipboard we can then right click the terminal screen to paste the address. Double check the address matches the one of your wallet then click enter if it is the same. The daemon will now ask if you wish to enable automatic re-staking. Type y and click enter if you would like to have your Service Node re-stake automatically for you at the end of every 30 days. Type n if you would like to re-stake manually. The daemon will now ask for a final confirmation, if you agree to the information provided type y and click enter. The daemon will output a command for us to run looking similar to: register_service_node 4294967292 T6TCCyDgjjbddtzwNGryRJ5HntgGYvqZTagBb2mtHhn7WWz7i5JDeqhFiHqu7ret56411ZJS7Thfeis718bVteBZ2UA6Y7G2d 4294967292 100.000000000 1535677391 ec3895ea70a4a91b5ec4b5e1df96a45e07046f1fb0123c754d98fb2d70f4529d 5bb35d7b8ab1acb943bc47913ada8f9d2e6d6e22264e57484a04c1bbfd461f0ee2e5435454cd9b7059b221eb506ce9ea4537ddd9faf1f1757e0ef611a41c0609 Copy the whole line of text and paste it into your notepad as we will need to run this command in our loki-wallet-cli . if registering multiple nodes, please wait at least 10 blocks between Service Nodes before running the register Service Node command in the wallet You have 2 weeks from the moment of registering the Service Node to run the register_service_node command, however it is advised to do it as soon as possible. We do not require our daemon terminal anymore, however we do need to daemon to be running. Hold CTRL and type ad to detach the screen. Run through step 5 once more to open our Loki wallet. Once we are in our wallet run the command the daemon outputted for us when we prepared our Service Node. Alternatively, you can also include the auto command, this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. register_service_node auto args..... If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop the auto command. The wallet will prompt us to confirm our password, then the amount of Loki to stake. Confirm this by typing y and clicking enter. Well done! Let's continue to the next step \"Step 7 - Service Node Check\" to check if our Service Node is running.","title":"6.1 - Individual Staking"},{"location":"Wallets/CliWallet/SNFullGuide/#62-pool-staking","text":"Service Nodes can be split between multiple parties. At a minimum, the operator must stake at least 25% of the total required amount. The operator can also reserve contribution slots for specific addresses to prevent random users from adding to the pool. In any given pool, there will be at most 4 contributors including the operator. After the operator, each new participant must also contribute 25% of the minimum, except the last one. So for example, valid splits might be: Operator Contributor 1 Contributor 2 Contributor 3 25% 25% 40% 10% 65% 25% 10% 90% 10% 99% 1% Depending on the individual and their circumstance they will need to: Jump into section \"6.2.1 - Operator\" if they are running the daemon and hosting the pool; Jump into section \"6.2.2 - Pool Contributor\" if they are contributing to someone's Service Node. NOTE: It is advised to read both sections of \"6.2 - Pool Staking\" to have a better understanding of the process.","title":"6.2 - Pool Staking"},{"location":"Wallets/CliWallet/SNFullGuide/#621-operator","text":"The Operator is the individual who will be hosting the pool and running the Service Node daemon, thus incurring the operating expenses encompassed by running a node. The Operator will need to have: A Loki daemon running with --service-node flag (see step 4) at all times. A loki-wallet-cli primary address with enough Loki in their account to meet 25% of the Staking Requirement. 1-3 other contributors who also have a loki-wallet-cli with enough Loki in their accounts to meet 25% of the staking requirement. The address and contribution amounts the 1-3 contributors will stake. NOTE: The other contributors addresses are optional to have as you can create your pool to be open to anyone to contribute to, however they are recommended to have to avoid any issues of other individuals stealing their spots. Now if we have the three/four above items we can proceed to our daemon to register our Service Node. Type screen -ls to get a list of the screens running. Your daemon will normally be the bottom one on the list. To enter our daemon run the following command, replacing <port number> with the number that corresponds with your daemon: screen -x <port number> To start the registration process we are going to run the following interactive command within the daemon terminal: prepare_registration The terminal will prompt the operator to specify if they will contribute the entire stake, because we are running this as a pooled Service Node we will type n and click enter. Next the terminal will request the input for the operator cut. This value is between 0-100 and represents the percentage of the reward the operator will receive before the reward is distributor to the share holders. If you have agreed to a 10% operator cut with the other contributors you would type 10 and click return. The terminal will now display the minimum reserve the operator can contribute and request the operator to input the amount in Loki they wish to contribute. Type your desired <operator contribution> and click return. Once we have set the operators desired stake amount we have the option to either leave the pool open for anyone to contribute or lock a reserve for individuals that have agreed with us to stake within our Service Node.","title":"6.2.1 - Operator"},{"location":"Wallets/CliWallet/SNFullGuide/#reserved-pool","text":"If the operator wishes to have their pool closed they should type y and click continue. The terminal will now prompt the operator for the number of additional contributors they have organised to be apart of this Service Node. They must type in the number of contributors, not including themselves, and click return. The daemon will now prompt us for the Loki address of the operator. If you followed step 5 you should have this address saved in a notepad, if not run through step 5 again to find your address. Once we have the Loki Address copied to our clipboard we can then right click the terminal screen to paste the address then click return to confirm your address. Next the operator must input each of the contributors amount of Loki they will stake and each contributors address. The daemon will now ask if you wish to enable automatic re-staking. Type y and hit return if you would like to have your Service Node re-stake automatically at the end of every 30 days. Type n if you would like to re-stake manually. You will now be asked to confirm the information above is correct.","title":"Reserved Pool"},{"location":"Wallets/CliWallet/SNFullGuide/#open-pool","text":"If the operator wishes to leave their pool open they should type n and click continue. The terminal will prompt the operator to input their address. Once the address has been inputted the terminal will display the remaining portion that needs to be contributed by others. If you agree click y and hit return. The daemon will display a summary of the information we entered. This is our chance for a final check over to make sure we entered in the right information. If you confirm the information is correct type y and click return. The daemon will output a command for us to run within our wallet, looking similar to: register_service_node 214748364 T6UCEoWvJHCJq5biK3LMQZ4CRXAaqiPda2kCRRYYYEMFfxYoqnUo7Nx88RL3wmENwN4kfjDSp2jMN1g6PSErKrSu2EEp8UMy5 1073741823 T6TCCyDgjjbddtzwNGryRJ5HntgGYvqZTagBb2mtHhn7WWz7i5JDeqhFiHqu7ret56411ZJS7Thfeis718bVteBZ2UA6Y7G2d 3221225469 25.000000000 1535692249 5dac247e90ced2dcd9e51faec8792acb0c11b4c700640d9104b17c868ea167e3 cc11eef804c11d3e93cf8c488c10d97b8cec9ee2b38e6666ff07749c2911aa06ce310edc926a4d2f50a588e9c15afcc20e935a0f188aa7caa764a62058dec80d NOTE: You must run the command outputed in your daemon and not the command shown above. Copy the whole line of text in your daemon and paste it into your notepad as we will need to run this command in our loki-wallet-cli . You have 2 weeks from the moment of registering the Service Node to run the register_service_node command, however it is advised to do it as soon as possible. Before we leave the daemon run the following command to get our <Service Node Public Key> and save it in your notepad: print_sn_key Run through step 5 once more to open our Loki wallet. Once we are in our wallet run the command the daemon outputted for us when we prepared our Service Node. The wallet will prompt us to confirm our password, then the amount of Loki to stake. Confirm this by typing y and clicking enter. Alternatively, the operator can also include the auto command, when staking this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. register_service_node auto args..... If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop the auto command. We must now send the <Service Node Public Key> to our contributors with the amount of Loki they are required to stake. At this point the we will need to wait until all contributors have staked before rewards will be received.","title":"Open Pool"},{"location":"Wallets/CliWallet/SNFullGuide/#622-pool-contributor","text":"The pool contributor must first receive the Service Node Pubkey and the requirements (amount of loki to send) from the Service Node Operator. If you are staking please do not use Subaddresses. They are currently unsupported by the Loki wallet The pool contributor must have downloaded the necessary binaries, is running a daemon or is connected to a remote node, has generated a wallet through the loki-wallet-cli , and has enough Loki to stake. They can then run the following command in their loki-wallet-cli . stake <Service Node Pubkey> <address> <contribution amount> Where the <Service Node Pubkey> is the Pubkey provided from the Service Node operator, the <address> the service node operator will likely reserve an address for which they want you to stake for, this will usually be the same address as the wallet you are planning to stake from, in the case of an open pool this will always be the address you will you stake from and you will also receive rewards here too. <contribution amount> is the amount of Loki they are going to stake which they agreed to with the Service Node Operator. The Pool Contributor can also include the auto command, when staking this will create a wallet which runs as a background process and automatically signs a register transaction each 30 days, so the contributor need not sign a new transaction manually each registration period. stake auto <Service Node Pubkey> <address> <contribution amount> If you run the auto command the wallet will close pushing the process into the background. See additional information at the end of this guide to learn how to stop autostaking. The auto command does not work with a multsig wallet as there is a requirement for the party who is staking to have the transaction signed by another signer. Thus is it advised if you are using a multisig wallet to maintain the staking once a month when the funds are unlocked. At this stage you will need to wait for the other contributors to provide their collateral. Once everyone has staked you can refer to \u201cStep 7 - Service Node Check\u201d to see where your Service Node Operator\u2019s node is in the list. Congratulations, you are now staking.","title":"6.2.2 - Pool Contributor"},{"location":"Wallets/CliWallet/SNFullGuide/#step-7-service-node-check","text":"After we have locked your collateral we will need to check if our Service Node Pubkey is sitting in the list with the other Service Node\u2019s on the network. This will prove our Service Node is running, recognised and will receive a reward if it keeps running. Let\u2019s go into our daemon screen by typing screen -x <port number> . To find the port number use screen -ls and your daemon should be sitting at the bottom of the list. Once we are in the daemon again we can run the following command to see our Service Node Public Key: print_sn_key The Service Node Public Key is used to identify our Service Node within the list of Service Nodes currently on the network. You can jump onto https://lokiblocks.com/ to see if your Service Node is in the list or we can continue in the terminal to output the same information. If you are running your Service Node on testnet go to https://lokitestnet.com/ instead. We will want to know the current block height, type status into the daemon and it will output this information. Once we have the block height we can then check the current Service Nodes on the network at our specified block height. Run the command print_quorum_state <block height> replacing <block height> with the number minus 1 that was outputted when running status command. If your <Service Node Pubkey> is sitting in the list you know you are now staking.","title":"Step 7 - Service Node Check"},{"location":"Wallets/CliWallet/SNFullGuide/#additional-functions","text":"","title":"Additional Functions"},{"location":"Wallets/CliWallet/SNFullGuide/#autostaking-checkingstopping-autostake-command","text":"To check the processes running in the background, run the command: top -u <username> Under the COMMAND column we should see a process called loki-wallet-cli . If you do not see this process you are either looking at the wrong <username> or your autostake command is not running. If you want to stop the autostake then run the following command while logged on to the specific <username> which has loki-wallet-cli running in the background: pkill loki-wallet-cli ### Running Autostake on startup If the host machine your VPS is running on shuts down or restarts unexpectedly then so to will your your autostaking wallet, you can use the following command to start the autostaking wallet again, you can also include these commands in your startup scripts, ensuring if your node goes down it automatically restarts the wallet process. loki-wallet-cli --testnet --wallet-file <PATH TO WALLET FILE> --password <WALLET PASSWORD> set ask-password 0 register_service_node auto ... Running this command if you have already staked will not stake over the top of an already staked node","title":"Autostaking - Checking/stopping autostake command"},{"location":"Wallets/CliWallet/SNFullGuide/#express-setup-guide","text":"This section is for power users who are more familiar with servers and the CLI interface. There's a couple of things your going to want to do before you commence. 1. Get a Server that meets requirements 2. Run the Daemon on a server from a non-root user account, then stake from a local wallet (or a wallet on a separate server). where <VERSION> is mentioned replace with the latest version , example 1.0.3 3. Connect via SSH to your server 4. add new user sudo adduser snode <enter> Y exit 5. login to your new user account via SSH snode@<ipaddress> 6. Update necessary security patches and system utilities sudo apt-get update sudo apt-get upgrade 7. Download & unzip Loki wget https://github.com/loki-project/loki/releases/download/v<VERSION>/loki-linux-x64-<VERSION>.zip sudo apt-get install unzip unzip loki-linux-x64-<VERSION>.zip 8. Run Loki in a screen and Detach Screen <enter> cd loki-linux-x64-<VERSION> ./lokid --service-node Ctrl +AD Wait for the Loki Daemon sync the blockchain (1 - 8 Hours depending on internet speed) 9. Open a Wallet This wallet can be in a screen on the Service Node machine, or a wallet on your local computer (assuming you have downloaded the binaries). cd loki-linux-x64-<VERSION> Linux/MAC - ./loki-wallet-cli Windows - loki-wallet-cli Enter Name: Name your wallet Enter password Language: 1 (for English) Securely store: 1. Address 2. Seed Phrase 3. Pass-phrase Send enough Loki to fund a node, wait for Balance to be unlocked (20 mins, 10 confirmations) 10. Register your Service Node On your Service Node reattach to the screen which has the Service Node running. screen -r prepare_registration Contribute entire Stake: Y/N Enter Loki Address Enable Restaking: Y/N Confirm: Y Copy green registration message Ctrl +AD 11. Reattach to Service Node or local wallet Paste in registration message <enter> 12 Attach Back to Service Node Daemon screen -r print_sn_key Copy service node key, and search for it on: https://lokiblocks.com/service_nodes CTRL +AD ctrl +ad detaches screen and runs your Loki Service Node in background this is critical","title":"Express Setup Guide"},{"location":"Wallets/CliWallet/SNFullGuide/#conclusion","text":"Well done! You will receive a block reward when your Service Node has been active for some time and the network chooses you within the list. Bonus Add the community-run telegram bot @lokiSNBot to receive on-the-fly updates about your service node. Props to @jagerman42 for building this. Bonus 2 View jagerman.com/sn/ for more details on Loki Service Node staking requirements. This guide will be regularly updated when new features are added to Snodes. Join the discord for more discussion. If you can improve this guide, please submit a pull request.","title":"Conclusion"},{"location":"Wallets/CliWallet/UsingLokiNET/","text":"Using LokiNET \u00b6 // TODO: overview for lokinet cli guide --no-igd on the command line or no-igd=1 in lokid.conf to disable IGD (UPnP port forwarding negotiation). --p2p-bind-ifname=lokitun0 to bind to just the lokinet tun interface // TODO: note which version of lokid has --p2p-bind-ifname option Example command line to start lokid for JUST lokinet traffic lokid --no-igd --p2p-bind-ifname=lokitun0","title":"Using LokiNET"},{"location":"Wallets/CliWallet/UsingLokiNET/#using-lokinet","text":"// TODO: overview for lokinet cli guide --no-igd on the command line or no-igd=1 in lokid.conf to disable IGD (UPnP port forwarding negotiation). --p2p-bind-ifname=lokitun0 to bind to just the lokinet tun interface // TODO: note which version of lokid has --p2p-bind-ifname option Example command line to start lokid for JUST lokinet traffic lokid --no-igd --p2p-bind-ifname=lokitun0","title":"Using LokiNET"},{"location":"Wallets/CliWallet/UsingTor/","text":"Using Tor \u00b6 While Loki isn't made to integrate with Tor, it can be used wrapped with torsocks, by setting the following configuration parameters and environment variables: --p2p-bind-ip 127.0.0.1 on the command line or p2p-bind-ip=127.0.0.1 in lokid.conf to disable listening for connections on external interfaces. --no-igd on the command line or no-igd=1 in lokid.conf to disable IGD (UPnP port forwarding negotiation), which is pointless with Tor. DNS_PUBLIC=tcp or DNS_PUBLIC=tcp://x.x.x.x where x.x.x.x is the IP of the desired DNS server, for DNS requests to go over TCP, so that they are routed through Tor. When IP is not specified, lokid uses the default list of servers defined in src/common/dns_utils.cpp . TORSOCKS_ALLOW_INBOUND=1 to tell torsocks to allow lokid to bind to interfaces to accept connections from the wallet. On some Linux systems, torsocks allows binding to localhost by default, so setting this variable is only necessary to allow binding to local LAN/VPN interfaces to allow wallets to connect from remote hosts. On other systems, it may be needed for local wallets as well. Do NOT pass --detach when running through torsocks with systemd, (see utils/systemd/lokid.service for details). Example command line to start lokid through Tor: DNS_PUBLIC=tcp torsocks lokid --p2p-bind-ip 127.0.0.1 --no-igd Using Tor on Tails \u00b6 TAILS ships with a very restrictive set of firewall rules. Therefore, you need to add a rule to allow this connection too, in addition to telling torsocks to allow inbound connections. Full example: sudo iptables -I OUTPUT 2 -p tcp -d 127.0.0.1 -m tcp --dport 18081 -j ACCEPT DNS_PUBLIC=tcp torsocks ./lokid --p2p-bind-ip 127.0.0.1 --no-igd --rpc-bind-ip 127.0.0.1 \\ --data-dir /home/amnesia/Persistent/your/directory/to/the/blockchain","title":"Using Tor"},{"location":"Wallets/CliWallet/UsingTor/#using-tor","text":"While Loki isn't made to integrate with Tor, it can be used wrapped with torsocks, by setting the following configuration parameters and environment variables: --p2p-bind-ip 127.0.0.1 on the command line or p2p-bind-ip=127.0.0.1 in lokid.conf to disable listening for connections on external interfaces. --no-igd on the command line or no-igd=1 in lokid.conf to disable IGD (UPnP port forwarding negotiation), which is pointless with Tor. DNS_PUBLIC=tcp or DNS_PUBLIC=tcp://x.x.x.x where x.x.x.x is the IP of the desired DNS server, for DNS requests to go over TCP, so that they are routed through Tor. When IP is not specified, lokid uses the default list of servers defined in src/common/dns_utils.cpp . TORSOCKS_ALLOW_INBOUND=1 to tell torsocks to allow lokid to bind to interfaces to accept connections from the wallet. On some Linux systems, torsocks allows binding to localhost by default, so setting this variable is only necessary to allow binding to local LAN/VPN interfaces to allow wallets to connect from remote hosts. On other systems, it may be needed for local wallets as well. Do NOT pass --detach when running through torsocks with systemd, (see utils/systemd/lokid.service for details). Example command line to start lokid through Tor: DNS_PUBLIC=tcp torsocks lokid --p2p-bind-ip 127.0.0.1 --no-igd","title":"Using Tor"},{"location":"Wallets/CliWallet/UsingTor/#using-tor-on-tails","text":"TAILS ships with a very restrictive set of firewall rules. Therefore, you need to add a rule to allow this connection too, in addition to telling torsocks to allow inbound connections. Full example: sudo iptables -I OUTPUT 2 -p tcp -d 127.0.0.1 -m tcp --dport 18081 -j ACCEPT DNS_PUBLIC=tcp torsocks ./lokid --p2p-bind-ip 127.0.0.1 --no-igd --rpc-bind-ip 127.0.0.1 \\ --data-dir /home/amnesia/Persistent/your/directory/to/the/blockchain","title":"Using Tor on Tails"},{"location":"Wallets/CliWallet/lokid/","text":"","title":"lokid"},{"location":"Wallets/GuiWallet/GUIOverview/","text":"","title":"GUI Overview"},{"location":"Wallets/GuiWallet/Guides/","text":"","title":"Guides"},{"location":"Wallets/MobileWallet/Guides/","text":"","title":"Android Wallet Guide"},{"location":"Wallets/MobileWallet/MobileWalletOverview/","text":"","title":"Mobile Wallet Overview"},{"location":"Wallets/RPCGuides/SNRPCGuide/","text":"Service Nodes Guide \u00b6 JSON 2.0 RPC Calls \u00b6 get_quorum_state \u00b6 Get the quorum state which is the list of public keys of the nodes who are voting, and the list of public keys of the nodes who are being tested. Testnet Example \u00b6 curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_quorum_state\", \"params\": {\"height\": 200}}' -H 'Content-Type: application/json' Result \u00b6 { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"nodes_to_test\": [\"578e5ee53150a3276dd3c411cb6313324a63b530cf3651f5c15e3d0ca58ceddd\", \u2026 \"c917034e9fcd0e9b0d423638664bbfc36eb8a2eeb68a1ff8bed8be5f699bc3c0\"], \"quorum_nodes\": [\"fc86a737756b6ed9f81233d22da3baee32537f3087901c3e94384be85ca1a9ee\", \u2026 \"ee597c5c7bbf1452e689a785f1133fc1355889b4111955d54cb5ed826cd35a32\"], \"status\": \"OK\", \"untrusted\": false } } Nodes have been omitted with \u201c...\u201d for brevity in nodes_to_test and quorum_nodes. Inputs \u00b6 Int height The height to query the quorum state for Outputs \u00b6 String[] nodes_to_test An array of public keys identifying service nodes which are being tested for the queried height. String[] quorum_state An array of public keys identifying service nodes which are responsible for voting on the queried height. get_staking_requirement \u00b6 Get the required amount of Loki to become a Service Node at the queried height. For stagenet and testnet values, ensure the daemon is started with the --stagenet or --testnet flags respectively. Testnet Example \u00b6 curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_staking_requirement\", \"params\": {\u201cheight\u201d: 111111}}' -H 'Content-Type: application/json' Result \u00b6 { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"staking_requirement\": 100000000000, \"status\": \"OK\" } } Inputs \u00b6 Int height The height to query the staking requirement for Outputs \u00b6 Uint64 staking_requirement The staking requirement in Loki atomic units for the queried height get_service_node_key \u00b6 Get the service node public key of the queried daemon. The daemon must be started in --service-node mode otherwise this RPC command will fail. Testnet Example \u00b6 curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_service_node_key\"}' -H 'Content-Type: application/json' Result \u00b6 { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"service_node_pubkey\": \"8d56c1fa0304884e612ee2efe763b2c50991a66329418fd084a3f23c75399f34\", \"status\": \"OK\" } } Inputs \u00b6 N/A Outputs \u00b6 String service_node_pubkey The public key identifying the queried service node get_service_nodes \u00b6 Get the metadata currently associated with the queried service node public keys such as, registration height and contributors, etc. If no public key is specified, this returns all the metadata for every service node the queried daemon currently knows about. Testnet Example \u00b6 curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_service_nodes\", \u201cparams\u201d: \u201cservice_node_pubkeys\u201d: []}' -H 'Content-Type: application/json' Result \u00b6 { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"service_node_states\": [{ \"contributors\": [{ \"address\": \"T6T6kZfTEf5JGw2SgLrGuxRNFxRTf51fvbbcCYW949RsKjX75JMA1B1d8CT4VbwfGR8uf3f3AJSTaBHGpN3QRG2N2LyiksWVg\", \"amount\": 100000000000, \"reserved\": 100000000000 }], \"last_reward_block_height\": 2968, \"last_reward_transaction_index\": 4294967295, \"last_uptime_proof\": 0, \"operator_address\": \"T6T6kZfTEf5JGw2SgLrGuxRNFxRTf51fvbbcCYW949RsKjX75JMA1B1d8CT4VbwfGR8uf3f3AJSTaBHGpN3QRG2N2LyiksWVg\", \"portions_for_operator\": 18446744073709551612, \"registration_height\": 1860, \"service_node_pubkey\": \"3afa36a4855a429f5eac1b2f8e7e77657a2e862999ab4d59e473826f9b15f2da\", \"staking_requirement\": 100000000000, \"total_contributed\": 100000000000, \"total_reserved\": 100000000000 }], \"status\": \"OK\" } } Inputs \u00b6 String[] service_node_pubkeys An array of service node public keys in strings that you wish to query metadata for. If an empty array is given, this RPC command returns all service nodes it knows about. Outputs \u00b6 Entry[] service_node_states The array of metadata for the queried service node(s) String service_node_pubkey The queried service node\u2019s identifying public key Uint64 registration_height The height at which the registration transaction arrived on the blockchain Uint64 last_reward_block_height The last block height this service node received a reward. Rewards are sent to service nodes whom have been waiting longest since their last reward and are then sent to the back of the queue. Uint64 last_reward_transaction_index The position in the queue to receive a reward for the service nodes grouped in the last_reward_block_height. Uint64 last_uptime_proof Unix epoch timestamp of the last time this daemon has received a ping from the queried service node. Contribution[] contributors An array consisting of all the addresses that have contributed to the queried service node. Uint64 Contribution.amount The amount of Loki in atomic units the contributor has staked. Uint64 Contribution.reserved The amount of Loki in atomic units the contributor has reserved and must fulfill to completely contribute their part to the service node. Amount is equal to reserved once the contributor has fully contributed their part. String Contribution.address The Loki address that funds must come from to fulfill the contribution requirement. Uint64 total_contributed The total Loki currently contributed going towards the staking requirement. Uint64 total_reserved The total Loki that has been reserved by all contributors. The remaining Loki is open for other contributors to increase their stake towards the service node. Uint64 portions_for_operator The operator cut expressed as a value from 0 -> STAKING_PORTIONS (defined in loki/src/cryptonote_config.h) which is the fee taken from the service node reward and given to the operator address before rewards are distributed to the contributors. Uint64 operator_address The wallet address which is the primary owner of the service node and also the address which the operator cut is sent to.","title":"Service Node RPC Guide"},{"location":"Wallets/RPCGuides/SNRPCGuide/#service-nodes-guide","text":"","title":"Service Nodes Guide"},{"location":"Wallets/RPCGuides/SNRPCGuide/#json-20-rpc-calls","text":"","title":"JSON 2.0 RPC Calls"},{"location":"Wallets/RPCGuides/SNRPCGuide/#get95quorum95state","text":"Get the quorum state which is the list of public keys of the nodes who are voting, and the list of public keys of the nodes who are being tested.","title":"get_quorum_state"},{"location":"Wallets/RPCGuides/SNRPCGuide/#testnet-example","text":"curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_quorum_state\", \"params\": {\"height\": 200}}' -H 'Content-Type: application/json'","title":"Testnet Example"},{"location":"Wallets/RPCGuides/SNRPCGuide/#result","text":"{ \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"nodes_to_test\": [\"578e5ee53150a3276dd3c411cb6313324a63b530cf3651f5c15e3d0ca58ceddd\", \u2026 \"c917034e9fcd0e9b0d423638664bbfc36eb8a2eeb68a1ff8bed8be5f699bc3c0\"], \"quorum_nodes\": [\"fc86a737756b6ed9f81233d22da3baee32537f3087901c3e94384be85ca1a9ee\", \u2026 \"ee597c5c7bbf1452e689a785f1133fc1355889b4111955d54cb5ed826cd35a32\"], \"status\": \"OK\", \"untrusted\": false } } Nodes have been omitted with \u201c...\u201d for brevity in nodes_to_test and quorum_nodes.","title":"Result"},{"location":"Wallets/RPCGuides/SNRPCGuide/#inputs","text":"Int height The height to query the quorum state for","title":"Inputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#outputs","text":"String[] nodes_to_test An array of public keys identifying service nodes which are being tested for the queried height. String[] quorum_state An array of public keys identifying service nodes which are responsible for voting on the queried height.","title":"Outputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#get95staking95requirement","text":"Get the required amount of Loki to become a Service Node at the queried height. For stagenet and testnet values, ensure the daemon is started with the --stagenet or --testnet flags respectively.","title":"get_staking_requirement"},{"location":"Wallets/RPCGuides/SNRPCGuide/#testnet-example_1","text":"curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_staking_requirement\", \"params\": {\u201cheight\u201d: 111111}}' -H 'Content-Type: application/json'","title":"Testnet Example"},{"location":"Wallets/RPCGuides/SNRPCGuide/#result_1","text":"{ \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"staking_requirement\": 100000000000, \"status\": \"OK\" } }","title":"Result"},{"location":"Wallets/RPCGuides/SNRPCGuide/#inputs_1","text":"Int height The height to query the staking requirement for","title":"Inputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#outputs_1","text":"Uint64 staking_requirement The staking requirement in Loki atomic units for the queried height","title":"Outputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#get95service95node95key","text":"Get the service node public key of the queried daemon. The daemon must be started in --service-node mode otherwise this RPC command will fail.","title":"get_service_node_key"},{"location":"Wallets/RPCGuides/SNRPCGuide/#testnet-example_2","text":"curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_service_node_key\"}' -H 'Content-Type: application/json'","title":"Testnet Example"},{"location":"Wallets/RPCGuides/SNRPCGuide/#result_2","text":"{ \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"service_node_pubkey\": \"8d56c1fa0304884e612ee2efe763b2c50991a66329418fd084a3f23c75399f34\", \"status\": \"OK\" } }","title":"Result"},{"location":"Wallets/RPCGuides/SNRPCGuide/#inputs_2","text":"N/A","title":"Inputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#outputs_2","text":"String service_node_pubkey The public key identifying the queried service node","title":"Outputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#get95service95nodes","text":"Get the metadata currently associated with the queried service node public keys such as, registration height and contributors, etc. If no public key is specified, this returns all the metadata for every service node the queried daemon currently knows about.","title":"get_service_nodes"},{"location":"Wallets/RPCGuides/SNRPCGuide/#testnet-example_3","text":"curl -X POST http://127.0.0.1:38157/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_service_nodes\", \u201cparams\u201d: \u201cservice_node_pubkeys\u201d: []}' -H 'Content-Type: application/json'","title":"Testnet Example"},{"location":"Wallets/RPCGuides/SNRPCGuide/#result_3","text":"{ \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"service_node_states\": [{ \"contributors\": [{ \"address\": \"T6T6kZfTEf5JGw2SgLrGuxRNFxRTf51fvbbcCYW949RsKjX75JMA1B1d8CT4VbwfGR8uf3f3AJSTaBHGpN3QRG2N2LyiksWVg\", \"amount\": 100000000000, \"reserved\": 100000000000 }], \"last_reward_block_height\": 2968, \"last_reward_transaction_index\": 4294967295, \"last_uptime_proof\": 0, \"operator_address\": \"T6T6kZfTEf5JGw2SgLrGuxRNFxRTf51fvbbcCYW949RsKjX75JMA1B1d8CT4VbwfGR8uf3f3AJSTaBHGpN3QRG2N2LyiksWVg\", \"portions_for_operator\": 18446744073709551612, \"registration_height\": 1860, \"service_node_pubkey\": \"3afa36a4855a429f5eac1b2f8e7e77657a2e862999ab4d59e473826f9b15f2da\", \"staking_requirement\": 100000000000, \"total_contributed\": 100000000000, \"total_reserved\": 100000000000 }], \"status\": \"OK\" } }","title":"Result"},{"location":"Wallets/RPCGuides/SNRPCGuide/#inputs_3","text":"String[] service_node_pubkeys An array of service node public keys in strings that you wish to query metadata for. If an empty array is given, this RPC command returns all service nodes it knows about.","title":"Inputs"},{"location":"Wallets/RPCGuides/SNRPCGuide/#outputs_3","text":"Entry[] service_node_states The array of metadata for the queried service node(s) String service_node_pubkey The queried service node\u2019s identifying public key Uint64 registration_height The height at which the registration transaction arrived on the blockchain Uint64 last_reward_block_height The last block height this service node received a reward. Rewards are sent to service nodes whom have been waiting longest since their last reward and are then sent to the back of the queue. Uint64 last_reward_transaction_index The position in the queue to receive a reward for the service nodes grouped in the last_reward_block_height. Uint64 last_uptime_proof Unix epoch timestamp of the last time this daemon has received a ping from the queried service node. Contribution[] contributors An array consisting of all the addresses that have contributed to the queried service node. Uint64 Contribution.amount The amount of Loki in atomic units the contributor has staked. Uint64 Contribution.reserved The amount of Loki in atomic units the contributor has reserved and must fulfill to completely contribute their part to the service node. Amount is equal to reserved once the contributor has fully contributed their part. String Contribution.address The Loki address that funds must come from to fulfill the contribution requirement. Uint64 total_contributed The total Loki currently contributed going towards the staking requirement. Uint64 total_reserved The total Loki that has been reserved by all contributors. The remaining Loki is open for other contributors to increase their stake towards the service node. Uint64 portions_for_operator The operator cut expressed as a value from 0 -> STAKING_PORTIONS (defined in loki/src/cryptonote_config.h) which is the fee taken from the service node reward and given to the operator address before rewards are distributed to the contributors. Uint64 operator_address The wallet address which is the primary owner of the service node and also the address which the operator cut is sent to.","title":"Outputs"},{"location":"Wallets/WebWallet/Guides/","text":"","title":"Guides"},{"location":"Wallets/WebWallet/WebWalletOverview/","text":"","title":"WW Overview"}]}